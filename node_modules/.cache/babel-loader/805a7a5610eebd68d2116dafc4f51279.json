{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Broadcast = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _config = require('../config.json');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction subscribeChannel(event, channel, callback) {\n  if (!event[channel]) {\n    event[channel] = callback || {};\n  } else if (event[channel] === {} && callback) {\n    event[channel] = callback;\n  }\n}\n\nfunction unsubscribeChannel(event, channel) {\n  if (event[channel]) {\n    delete event[channel];\n  }\n}\n\nvar Broadcast = exports.Broadcast = function () {\n  function Broadcast() {\n    _classCallCheck(this, Broadcast);\n\n    this._message = {};\n    this._presence = {};\n    this._status = null;\n  }\n\n  _createClass(Broadcast, [{\n    key: 'message',\n    value: function message(channel, callback) {\n      subscribeChannel(this._message, channel, callback);\n    }\n  }, {\n    key: 'presence',\n    value: function presence(channel, callback) {\n      subscribeChannel(this._presence, channel, callback);\n    }\n  }, {\n    key: 'status',\n    value: function status(callback) {\n      if (!this._status) {\n        this._status = callback || {};\n      } else if (this._status === {} && callback) {\n        this._status = callback;\n      }\n    }\n  }, {\n    key: 'isSubscribe',\n    value: function isSubscribe(event, channel) {\n      var subscriber = '_' + event;\n\n      if (subscriber === '_status') {\n        return this[subscriber];\n      } else {\n        return this[subscriber] && this[subscriber][channel];\n      }\n    }\n  }, {\n    key: 'emit',\n    value: function emit(event, channel, args) {\n      var subscriber = '_' + event;\n\n      if (this[subscriber] && this[subscriber][channel] && typeof this[subscriber][channel] === 'function') {\n        this[subscriber][channel].call(null, args);\n      }\n    }\n  }, {\n    key: 'emitStatus',\n    value: function emitStatus(args) {\n      if (this._status && typeof this._status === 'function') {\n        this._status.call(null, args);\n      }\n    }\n  }, {\n    key: 'error',\n    value: function error(callback) {\n      this._error = callback;\n    }\n  }, {\n    key: 'emitError',\n    value: function emitError(args) {\n      if (this._error) {\n        this._error.call(null, args);\n      }\n    }\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe(channel) {\n      var _this = this;\n\n      _config2.default.subscribe_listener_events_to_broadcast.forEach(function (event) {\n        var subscriber = '_' + event;\n        unsubscribeChannel(_this[subscriber], channel);\n      });\n    }\n  }]);\n\n  return Broadcast;\n}();","map":null,"metadata":{},"sourceType":"script"}