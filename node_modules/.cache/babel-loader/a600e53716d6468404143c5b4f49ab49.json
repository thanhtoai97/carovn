{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js\";\n\n/* eslint-disable no-shadow */\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button, message } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\nimport './register.css';\n\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      /*\n      const { form, registerAsync } = this.props;\n      e.preventDefault();\n      form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          message.loading('You Are You Registering....', 2.5).then(() => {\n            message.success('You Are Logged In!', 1.0);\n            window.location.href = '/';\n          });\n          registerAsync(values.name, values.email, values.password);\n        }\n      });\n      */\n      e.preventDefault();\n      const form = this.props.form;\n      form.validateFieldsAndScroll(err => {\n        if (!err) {\n          const apiBaseUrl = 'http://localhost:3002/users/';\n          const _this$state = this.state,\n                name = _this$state.name,\n                email = _this$state.email,\n                password = _this$state.password;\n          const data = {\n            name,\n            user_email: email,\n            password\n          };\n          const headers = {\n            'Content-Type': 'application/json'\n          };\n          axios.post(\"\".concat(apiBaseUrl, \"register\"), data, {\n            headers\n          }).then(response => {\n            if (response.data.success) {\n              localStorage.setItem('u_code', encodeURIComponent(JSON.stringify(response.data.data)));\n              localStorage.setItem('is_done', true);\n              window.location.href = '/';\n              console.log('Login successfull');\n            } else {\n              console.log(response.data.message);\n            }\n          }).catch(function (error) {\n            console.log(error);\n          });\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const confirmDirty = this.state.confirmDirty;\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const confirmDirty = this.state.confirmDirty;\n      const form = this.props.form;\n\n      if (value && confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.state = {\n      confirmDirty: false,\n      email: '',\n      name: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const form = this.props.form;\n    const getFieldDecorator = form.getFieldDecorator;\n    return React.createElement(\"article\", {\n      className: \"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      rules: [{\n        type: 'name',\n        message: 'The input is not valid Name!'\n      }, {\n        required: true,\n        message: 'Please input your Name!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"boo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Register\"))));\n  }\n\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) => dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(mapStateToProps, matchDispatchToProps)(form);","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js"],"names":["React","axios","connect","Form","Input","Checkbox","Button","message","registerAsync","RegistrationForm","Component","constructor","props","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","apiBaseUrl","state","name","email","password","data","user_email","headers","post","then","response","success","localStorage","setItem","encodeURIComponent","JSON","stringify","window","location","href","console","log","catch","error","handleConfirmBlur","confirmDirty","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","rules","type","required","validator","valuePropName","create","mapStateToProps","registering","matchDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button, message } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\nimport './register.css';\n\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmDirty: false,\n      email: '',\n      name: '',\n      password: ''\n    };\n  }\n\n  handleSubmit = e => {\n    /*\n    const { form, registerAsync } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        message.loading('You Are You Registering....', 2.5).then(() => {\n          message.success('You Are Logged In!', 1.0);\n          window.location.href = '/';\n        });\n        registerAsync(values.name, values.email, values.password);\n      }\n    });\n    */\n    e.preventDefault();\n    const { form } = this.props;\n    form.validateFieldsAndScroll(err => {\n      if (!err) {\n        const apiBaseUrl = 'http://localhost:3002/users/';\n        const { name, email, password } = this.state;\n        const data = {\n          name,\n          user_email: email,\n          password\n        };\n\n        const headers = {\n          'Content-Type': 'application/json'\n        };\n        axios\n          .post(`${apiBaseUrl}register`, data, { headers })\n          .then(response => {\n            if (response.data.success) {\n              localStorage.setItem(\n                'u_code',\n                encodeURIComponent(JSON.stringify(response.data.data))\n              );\n              localStorage.setItem('is_done', true);\n              window.location.href = '/';\n              console.log('Login successfull');\n            } else {\n              console.log(response.data.message);\n            }\n          })\n          .catch(function(error) {\n            console.log(error);\n          });\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { confirmDirty } = this.state;\n    const { value } = e.target;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { confirmDirty } = this.state;\n    const { form } = this.props;\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { form } = this.props;\n    const { getFieldDecorator } = form;\n\n    return (\n      <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Item label=\"Name\">\n            {getFieldDecorator('name', {\n              rules: [\n                {\n                  type: 'name',\n                  message: 'The input is not valid Name!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your Name!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Password\" hasFeedback>\n            {getFieldDecorator('password', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                },\n                {\n                  validator: this.validateToNextPassword\n                }\n              ]\n            })(<Input.Password />)}\n          </Form.Item>\n\n          <Form.Item>\n            {getFieldDecorator('agreement', {\n              valuePropName: 'checked'\n            })(\n              <Checkbox>\n                I have read the <a href=\"boo\">agreement</a>\n              </Checkbox>\n            )}\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Register\n            </Button>\n          </Form.Item>\n        </Form>\n      </article>\n    );\n  }\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) =>\n    dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(form);\n"]},"metadata":{},"sourceType":"module"}