{"ast":null,"code":"import fetch from 'cross-fetch';\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {// auto logout if 401 response returned from api\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nfunction register(name, email, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(name, email, password)\n  };\n  return fetch('http://localhost:3002/users/register', requestOptions).then(response => {\n    return response.json();\n  });\n}\n/*\n fetch('http://localhost:5000/users/register', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        name,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          check = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (!check) {\n          this.setState({\n            kindAlert: 'failed',\n            message: response.message\n          });\n        } else {\n          this.setState({\n            kindAlert: 'success'\n          });\n        }\n      });\n  };\n  */\n\n\nexport default register;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/service/index.js"],"names":["fetch","handleResponse","response","text","then","data","JSON","parse","ok","status","error","message","statusText","Promise","reject","register","name","email","password","requestOptions","method","headers","body","stringify","json"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,SAAOA,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,CAAqBD,IAAI,IAAI;AAClC,UAAME,IAAI,GAAGF,IAAI,IAAIG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACM,EAAd,EAAkB;AAChB,UAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B,CAC3B;AACD;;AAED,YAAMC,KAAK,GAAIL,IAAI,IAAIA,IAAI,CAACM,OAAd,IAA0BT,QAAQ,CAACU,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AAED,WAAOL,IAAP;AACD,GAZM,CAAP;AAaD;;AAED,SAASU,QAAT,CAAkBC,IAAlB,EAAwBC,KAAxB,EAA+BC,QAA/B,EAAyC;AACvC,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAeP,IAAf,EAAqBC,KAArB,EAA4BC,QAA5B;AAHe,GAAvB;AAKA,SAAOlB,KAAK,CAAC,sCAAD,EAAyCmB,cAAzC,CAAL,CAA8Df,IAA9D,CACLF,QAAQ,IAAI;AACV,WAAOA,QAAQ,CAACsB,IAAT,EAAP;AACD,GAHI,CAAP;AAKD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,eAAeT,QAAf","sourcesContent":["import fetch from 'cross-fetch';\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nfunction register(name, email, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(name, email, password)\n  };\n  return fetch('http://localhost:3002/users/register', requestOptions).then(\n    response => {\n      return response.json();\n    }\n  );\n}\n\n/*\n fetch('http://localhost:5000/users/register', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        name,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          check = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (!check) {\n          this.setState({\n            kindAlert: 'failed',\n            message: response.message\n          });\n        } else {\n          this.setState({\n            kindAlert: 'success'\n          });\n        }\n      });\n  };\n  */\n\nexport default register;\n"]},"metadata":{},"sourceType":"module"}