{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false\n    };\n\n    this.handleSubmit = e => {\n      const form = this.props.form;\n      e.preventDefault();\n      form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"boo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  loggedInUser: state.authReducer.loggedInUser\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (email, password) => dispatch(registerAsync(email, password))\n});\n\nexport default connect(mapStateToProps, matchDispatchToProps)(form);","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js"],"names":["React","connect","Form","Input","Checkbox","Button","registerAsync","RegistrationForm","Component","state","confirmDirty","handleSubmit","e","form","props","preventDefault","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","rules","type","message","required","validator","valuePropName","create","mapStateToProps","loggedInUser","authReducer","matchDispatchToProps","dispatch","email","password"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false\n  };\n\n  handleSubmit = e => {\n    const { form } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator('email', {\n            rules: [\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!'\n              },\n              {\n                required: true,\n                message: 'Please input your E-mail!'\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!'\n              },\n              {\n                validator: this.validateToNextPassword\n              }\n            ]\n          })(<Input.Password />)}\n        </Form.Item>\n        <Form.Item label=\"Confirm Password\" hasFeedback>\n          {getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!'\n              },\n              {\n                validator: this.compareToFirstPassword\n              }\n            ]\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked'\n          })(\n            <Checkbox>\n              I have read the <a href=\"boo\">agreement</a>\n            </Checkbox>\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  loggedInUser: state.authReducer.loggedInUser\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (email, password) => dispatch(registerAsync(email, password))\n});\n\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(form);\n"]},"metadata":{},"sourceType":"module"}