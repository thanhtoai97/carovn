{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/containers/Users/InforUser.js\";\n\n/* eslint-disable react/jsx-props-no-spreading */\n\n/* eslint-disable react/state-in-constructor */\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button, Select, AutoComplete, Tooltip, Icon, Row, Col, message } from 'antd';\nimport { MDBRow } from 'mdbreact';\nimport { registerAsync } from '../../modules/Register/actions/index';\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      const _this$props = this.props,\n            form = _this$props.form,\n            user = _this$props.user;\n      e.preventDefault();\n      form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          user.email = values.email;\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const confirmDirty = this.state.confirmDirty;\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const confirmDirty = this.state.confirmDirty;\n      const form = this.props.form;\n\n      if (value && confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          form = _this$props2.form,\n          user = _this$props2.user;\n    console.log(user.email);\n    const getFieldDecorator = form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 20\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"+86\"), React.createElement(Option, {\n      value: \"87\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"+87\")));\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, website));\n    return React.createElement(\"article\", {\n      className: \"center br3 pa3 ba b--black-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"header pt-3 peach-gradient\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"white-text mb-3 pt-3 font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Sign up:\"))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      rules: [{\n        required: true,\n        message: 'Please input your name!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete, {\n      dataSource: websiteOptions,\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, getFieldDecorator('captcha', {\n      rules: [{\n        required: true,\n        message: 'Please input the captcha you got!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"ddd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"agreement\"))), \"Or \", React.createElement(\"a\", {\n      href: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Login now!\")), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Register\"))));\n  }\n\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering,\n  user: state.login.user\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) => dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(mapStateToProps, matchDispatchToProps)(form);","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/containers/Users/InforUser.js"],"names":["React","axios","connect","Form","Input","Checkbox","Button","Select","AutoComplete","Tooltip","Icon","Row","Col","message","MDBRow","registerAsync","Option","AutoCompleteOption","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","props","form","user","preventDefault","validateFieldsAndScroll","err","values","email","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","console","log","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","rules","type","required","validator","whitespace","valuePropName","create","mapStateToProps","registering","login","matchDispatchToProps","dispatch","name","password"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/state-in-constructor */\nimport React from 'react';\nimport axios from 'axios';\n\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  Input,\n  Checkbox,\n  Button,\n  Select,\n  AutoComplete,\n  Tooltip,\n  Icon,\n  Row,\n  Col,\n  message\n} from 'antd';\nimport { MDBRow } from 'mdbreact';\nimport { registerAsync } from '../../modules/Register/actions/index';\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: []\n  };\n\n  handleSubmit = e => {\n    const { form, user } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        user.email = values.email;\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { confirmDirty } = this.state;\n    const { value } = e.target;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { confirmDirty } = this.state;\n    const { form } = this.props;\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  handleWebsiteChange = value => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(\n        domain => `${value}${domain}`\n      );\n    }\n    this.setState({ autoCompleteResult });\n  };\n\n  render() {\n    const { form, user } = this.props;\n    console.log(user.email);\n    const { getFieldDecorator } = form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 20 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>\n    );\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <article className=\"center br3 pa3 ba b--black-10\">\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n          <div className=\"header pt-3 peach-gradient\">\n            <MDBRow className=\"d-flex justify-content-center\">\n              <h3 className=\"white-text mb-3 pt-3 font-weight-bold\">\n                Sign up:\n              </h3>\n            </MDBRow>\n          </div>\n          <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Password\" hasFeedback>\n            {getFieldDecorator('password', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                },\n                {\n                  validator: this.validateToNextPassword\n                }\n              ]\n            })(<Input.Password />)}\n          </Form.Item>\n          <Form.Item label=\"Confirm Password\" hasFeedback>\n            {getFieldDecorator('confirm', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please confirm your password!'\n                },\n                {\n                  validator: this.compareToFirstPassword\n                }\n              ]\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n          </Form.Item>\n          <Form.Item\n            label={\n              <span>\n                Nickname&nbsp;\n                <Tooltip title=\"What do you want others to call you?\">\n                  <Icon type=\"question-circle-o\" />\n                </Tooltip>\n              </span>\n            }\n          >\n            {getFieldDecorator('name', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your name!',\n                  whitespace: true\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n\n          <Form.Item label=\"Phone Number\">\n            {getFieldDecorator('phone', {\n              rules: [\n                { required: true, message: 'Please input your phone number!' }\n              ]\n            })(\n              <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n            )}\n          </Form.Item>\n          <Form.Item label=\"Website\">\n            {getFieldDecorator('website', {\n              rules: [{ required: true, message: 'Please input website!' }]\n            })(\n              <AutoComplete\n                dataSource={websiteOptions}\n                onChange={this.handleWebsiteChange}\n                placeholder=\"website\"\n              >\n                <Input />\n              </AutoComplete>\n            )}\n          </Form.Item>\n          <Form.Item\n            label=\"Captcha\"\n            extra=\"We must make sure that your are a human.\"\n          >\n            <Row gutter={8}>\n              <Col span={12}>\n                {getFieldDecorator('captcha', {\n                  rules: [\n                    {\n                      required: true,\n                      message: 'Please input the captcha you got!'\n                    }\n                  ]\n                })(<Input />)}\n              </Col>\n              <Col span={12}>\n                <Button>Get captcha</Button>\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            {getFieldDecorator('agreement', {\n              valuePropName: 'checked'\n            })(\n              <Checkbox>\n                I have read the <a href=\"ddd\">agreement</a>\n              </Checkbox>\n            )}\n            Or <a href=\"/\">Login now!</a>\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Register\n            </Button>\n          </Form.Item>\n        </Form>\n      </article>\n    );\n  }\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering,\n  user: state.login.user\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) =>\n    dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(form);\n"]},"metadata":{},"sourceType":"module"}