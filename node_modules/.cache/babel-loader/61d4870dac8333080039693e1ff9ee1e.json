{"ast":null,"code":"/* eslint-disable camelcase */\n// import axios from 'axios';\nimport fetch from 'cross-fetch'; // import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\n/*\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = { 'Content-Type': 'application/json' };\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = data => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios\n      .post(`${apiURL}register`, { data }, { headers })\n      .then(response => {\n        dispatch(register_Success(response.data));\n        localStorage.setItem('u_code', JSON.stringify(response.data));\n        localStorage.setItem('is_done', true);\n      })\n      .then(response => {\n        return response.json();\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\n/*\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          res = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (res) {\n          dispatch(getUser(response));\n        } else {\n          dispatch(loginFailed(response.message));\n        }\n      });\n  };\n};\n*/\n\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n/*\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\n\nexport const registerAsync = (name, email, password) => {\n  let check = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/register', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    }).then(response => {\n      if (response.status !== 200) {\n        check = false;\n      }\n\n      dispatch.register_Success(name, email, password);\n      return response.json();\n    }).then(response => {\n      if (!check) {\n        this.setState({\n          kindAlert: 'failed',\n          message: response.message\n        });\n      } else {\n        this.setState({\n          kindAlert: 'success'\n        });\n      }\n    });\n  };\n};\nexport default registerAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["fetch","ActionsTypes","register_Success","name","email","password","type","AUTH_REGISTER_SUCCESS","register_Pending","AUTH_REGISTER_PENDING","register_Error","error","AUTH_REGISTER_ERROR","registerAsync","check","dispatch","method","headers","Accept","body","JSON","stringify","then","response","status","json","setState","kindAlert","message"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,aAAlB,C,CAEA;;AAEA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,MAA4B;AACnDC,EAAAA,IAAI,EAAEL,YAAY,CAACM,qBADgC;AAEnDJ,EAAAA,IAFmD;AAGnDC,EAAAA,KAHmD;AAInDC,EAAAA;AAJmD,CAA5B,CAAzB;;AAOA,MAAMG,gBAAgB,GAAG,CAACL,IAAD,EAAOC,KAAP,EAAcC,QAAd,MAA4B;AACnDC,EAAAA,IAAI,EAAEL,YAAY,CAACQ,qBADgC;AAEnDN,EAAAA,IAFmD;AAGnDC,EAAAA,KAHmD;AAInDC,EAAAA;AAJmD,CAA5B,CAAzB;;AAOA,MAAMK,cAAc,GAAGC,KAAK,KAAK;AAC/BL,EAAAA,IAAI,EAAEL,YAAY,CAACW,mBADY;AAE/BD,EAAAA;AAF+B,CAAL,CAA5B;AAKA;;;;;;;;;;;;;;;;;;AAgBA,OAAO,MAAME,aAAa,GAAG,CAACV,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AACtD,MAAIS,KAAK,GAAG,IAAZ;AACA,SAAOC,QAAQ,IAAI;AACjBf,IAAAA,KAAK,CAAC,sCAAD,EAAyC;AAC5CgB,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFmC;AAO5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBlB,QAAAA,IADmB;AAEnBC,QAAAA,KAFmB;AAGnBC,QAAAA;AAHmB,OAAf;AAPsC,KAAzC,CAAL,CAaGiB,IAbH,CAaQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BV,QAAAA,KAAK,GAAG,KAAR;AACD;;AACDC,MAAAA,QAAQ,CAACb,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuCC,QAAvC;AACA,aAAOkB,QAAQ,CAACE,IAAT,EAAP;AACD,KAnBH,EAoBGH,IApBH,CAoBQC,QAAQ,IAAI;AAChB,UAAI,CAACT,KAAL,EAAY;AACV,aAAKY,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAE,QADC;AAEZC,UAAAA,OAAO,EAAEL,QAAQ,CAACK;AAFN,SAAd;AAID,OALD,MAKO;AACL,aAAKF,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAE;AADC,SAAd;AAGD;AACF,KA/BH;AAgCD,GAjCD;AAkCD,CApCM;AAqCP,eAAed,aAAf","sourcesContent":["/* eslint-disable camelcase */\n// import axios from 'axios';\nimport fetch from 'cross-fetch';\n\n// import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\n\n/*\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = { 'Content-Type': 'application/json' };\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = data => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios\n      .post(`${apiURL}register`, { data }, { headers })\n      .then(response => {\n        dispatch(register_Success(response.data));\n        localStorage.setItem('u_code', JSON.stringify(response.data));\n        localStorage.setItem('is_done', true);\n      })\n      .then(response => {\n        return response.json();\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n/*\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          res = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (res) {\n          dispatch(getUser(response));\n        } else {\n          dispatch(loginFailed(response.message));\n        }\n      });\n  };\n};\n*/\n\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\n/*\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\nexport const registerAsync = (name, email, password) => {\n  let check = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/register', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          check = false;\n        }\n        dispatch.register_Success(name, email, password);\n        return response.json();\n      })\n      .then(response => {\n        if (!check) {\n          this.setState({\n            kindAlert: 'failed',\n            message: response.message\n          });\n        } else {\n          this.setState({\n            kindAlert: 'success'\n          });\n        }\n      });\n  };\n};\nexport default registerAsync;\n"]},"metadata":{},"sourceType":"module"}