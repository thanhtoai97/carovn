{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js\";\n\n/* eslint-disable no-shadow */\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button, message } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\nimport './register.css';\n\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      const _this$props = this.props,\n            form = _this$props.form,\n            registerAsync = _this$props.registerAsync;\n      e.preventDefault();\n      form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          message.loading('You Are You Registering....', 2.5).then(() => {\n            message.success('You Are Logged In!', 1.0);\n            window.location.href = '/';\n          }); // registerAsync(values.name, values.email, values.password);\n        }\n      });\n      /*\n      e.preventDefault();\n      const apiBaseUrl = 'http://localhost:3002/users/';\n      const { name, email, password } = this.state;\n      const data = {\n        name,\n        user_email: email,\n        password\n      };\n       const headers = {\n        'Content-Type': 'application/json'\n      };\n      axios\n        .post(`${apiBaseUrl}register`, data, { headers })\n        .then(response => {\n          if (response.data.success) {\n            localStorage.setItem(\n              'u_code',\n              encodeURIComponent(JSON.stringify(response.data.data))\n            );\n            localStorage.setItem('is_done', true);\n            message.loading('You Are You Logging IN....', 2.5).then(() => {\n              message.success('You Are Logged In!', 1.0);\n              window.location.href = '/login';\n            });\n          } else {\n            message.loading('You Are You Logging IN....', 2.5).then(() => {\n              message.success(response.data.message, 1.0);\n              window.location.href = '/register';\n            });\n          }\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n        */\n    };\n\n    this.handleConfirmBlur = e => {\n      const confirmDirty = this.state.confirmDirty;\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const confirmDirty = this.state.confirmDirty;\n      const form = this.props.form;\n\n      if (value && confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.state = {\n      confirmDirty: false,\n      email: '',\n      name: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const form = this.props.form;\n    const getFieldDecorator = form.getFieldDecorator;\n    return React.createElement(\"article\", {\n      className: \"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      rules: [{\n        type: 'name',\n        message: 'The input is not valid Name!'\n      }, {\n        required: true,\n        message: 'Please input your Name!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"boo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Register\"))));\n  }\n\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) => dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(mapStateToProps, matchDispatchToProps)(form);","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js"],"names":["React","axios","connect","Form","Input","Checkbox","Button","message","registerAsync","RegistrationForm","Component","constructor","props","handleSubmit","e","form","preventDefault","validateFieldsAndScroll","err","values","loading","then","success","window","location","href","handleConfirmBlur","confirmDirty","state","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","email","name","password","render","getFieldDecorator","rules","type","required","validator","valuePropName","create","mapStateToProps","registering","matchDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button, message } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\nimport './register.css';\n\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmDirty: false,\n      email: '',\n      name: '',\n      password: ''\n    };\n  }\n\n  handleSubmit = e => {\n    const { form, registerAsync } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        message.loading('You Are You Registering....', 2.5).then(() => {\n          message.success('You Are Logged In!', 1.0);\n          window.location.href = '/';\n        });\n        // registerAsync(values.name, values.email, values.password);\n      }\n    });\n\n    /*\n    e.preventDefault();\n    const apiBaseUrl = 'http://localhost:3002/users/';\n    const { name, email, password } = this.state;\n    const data = {\n      name,\n      user_email: email,\n      password\n    };\n\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    axios\n      .post(`${apiBaseUrl}register`, data, { headers })\n      .then(response => {\n        if (response.data.success) {\n          localStorage.setItem(\n            'u_code',\n            encodeURIComponent(JSON.stringify(response.data.data))\n          );\n          localStorage.setItem('is_done', true);\n          message.loading('You Are You Logging IN....', 2.5).then(() => {\n            message.success('You Are Logged In!', 1.0);\n            window.location.href = '/login';\n          });\n        } else {\n          message.loading('You Are You Logging IN....', 2.5).then(() => {\n            message.success(response.data.message, 1.0);\n            window.location.href = '/register';\n          });\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n      */\n  };\n\n  handleConfirmBlur = e => {\n    const { confirmDirty } = this.state;\n    const { value } = e.target;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { confirmDirty } = this.state;\n    const { form } = this.props;\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { form } = this.props;\n    const { getFieldDecorator } = form;\n\n    return (\n      <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Item label=\"Name\">\n            {getFieldDecorator('name', {\n              rules: [\n                {\n                  type: 'name',\n                  message: 'The input is not valid Name!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your Name!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Password\" hasFeedback>\n            {getFieldDecorator('password', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                },\n                {\n                  validator: this.validateToNextPassword\n                }\n              ]\n            })(<Input.Password />)}\n          </Form.Item>\n\n          <Form.Item>\n            {getFieldDecorator('agreement', {\n              valuePropName: 'checked'\n            })(\n              <Checkbox>\n                I have read the <a href=\"boo\">agreement</a>\n              </Checkbox>\n            )}\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Register\n            </Button>\n          </Form.Item>\n        </Form>\n      </article>\n    );\n  }\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) =>\n    dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(form);\n"]},"metadata":{},"sourceType":"module"}