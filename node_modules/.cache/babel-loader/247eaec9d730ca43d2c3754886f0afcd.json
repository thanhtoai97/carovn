{"ast":null,"code":"import _slicedToArray from \"/Users/lttttoai/Documents/GitHub/carovn/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/containers/GameOnline/GameOnline.js\";\nimport React from 'react';\nimport Swal from 'sweetalert2';\nimport Board from '../../components/Board';\n\nclass GameOnline extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.newRound = winner => {\n      const title = winner === null ? 'Tie game!' : \"Player \".concat(winner, \" won!\"); // Show this if the player is not the room creator\n\n      const _this$props = this.props,\n            isRoomCreator = _this$props.isRoomCreator,\n            pubnub = _this$props.pubnub,\n            gameChannel = _this$props.gameChannel;\n\n      if (isRoomCreator === false && this.gameOver) {\n        Swal.fire({\n          position: 'top',\n          allowOutsideClick: false,\n          title,\n          text: 'Waiting for a new round...',\n          confirmButtonColor: 'rgb(208,33,41)',\n          width: 275,\n          customClass: {\n            heightAuto: false,\n            title: 'title-class',\n            popup: 'popup-class',\n            confirmButton: 'button-class'\n          }\n        });\n        this.turn = 'X'; // Set turn to X so Player O can't make a move\n      } // Show this to the room creator\n      else if (isRoomCreator && this.gameOver) {\n          Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title,\n            text: 'Continue Playing?',\n            showCancelButton: true,\n            confirmButtonColor: 'rgb(208,33,41)',\n            cancelButtonColor: '#aaa',\n            cancelButtonText: 'Nope',\n            confirmButtonText: 'Yea!',\n            width: 275,\n            customClass: {\n              heightAuto: false,\n              title: 'title-class',\n              popup: 'popup-class',\n              confirmButton: 'button-class',\n              cancelButton: 'button-class'\n            }\n          }).then(result => {\n            // Start a new round\n            if (result.value) {\n              pubnub.publish({\n                message: {\n                  reset: true\n                },\n                channel: gameChannel\n              });\n            } else {\n              // End the game\n              pubnub.publish({\n                message: {\n                  endGame: true\n                },\n                channel: gameChannel\n              });\n            }\n          });\n        }\n    };\n\n    this.announceWinner = winner => {\n      const _this$state = this.state,\n            xScore = _this$state.xScore,\n            oScore = _this$state.oScore;\n      const pieces = {\n        X: xScore,\n        O: oScore\n      };\n\n      if (winner === 'X') {\n        pieces.X += 1;\n        this.setState({\n          xScore: pieces.X\n        });\n      } else {\n        pieces.O += 1;\n        this.setState({\n          oScore: pieces.O\n        });\n      } // End the game once there is a winner\n\n\n      this.gameOver = true;\n      this.newRound(winner);\n    };\n\n    this.checkForWinner = squares => {\n      // Possible winning combinations\n      const possibleCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate every combination to see if there is a match\n\n      for (let i = 0; i < possibleCombinations.length; i += 1) {\n        const _possibleCombinations = _slicedToArray(possibleCombinations[i], 3),\n              a = _possibleCombinations[0],\n              b = _possibleCombinations[1],\n              c = _possibleCombinations[2];\n\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          this.announceWinner(squares[a]);\n          return;\n        }\n      } // Check if the game ends in a draw\n\n\n      this.counter += 1; // The board is filled up and there is no winner\n\n      if (this.counter === 9) {\n        this.gameOver = true;\n        this.newRound(null);\n      }\n    };\n\n    this.publishMove = (index, piece) => {\n      const _this$state2 = this.state,\n            squares = _this$state2.squares,\n            whosTurn = _this$state2.whosTurn;\n      squares[index] = piece;\n      this.turn = squares[index] === 'X' ? 'O' : 'X';\n      this.setState({\n        squares,\n        whosTurn: !whosTurn\n      });\n      this.checkForWinner(squares);\n    };\n\n    this.onMakeMove = index => {\n      const _this$state3 = this.state,\n            squares = _this$state3.squares,\n            whosTurn = _this$state3.whosTurn;\n      const _this$props2 = this.props,\n            piece = _this$props2.piece,\n            pubnub = _this$props2.pubnub,\n            gameChannel = _this$props2.gameChannel; // Check if the square is empty and if it's the player's turn to make a move\n\n      if (!squares[index] && this.turn === piece) {\n        squares[index] = piece;\n        this.setState({\n          squares,\n          whosTurn: !whosTurn\n        }); // Other player's turn to make a move\n\n        this.turn = this.turn === 'X' ? 'O' : 'X'; // Publish move to the channel\n\n        pubnub.publish({\n          message: {\n            index,\n            piece,\n            turn: this.turn\n          },\n          channel: gameChannel\n        }); // Check if there is a winner\n\n        this.checkForWinner(squares);\n      }\n    };\n\n    const myTurn = this.props.myTurn;\n    this.state = {\n      squares: Array(9).fill(''),\n      // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: myTurn\n    };\n    this.turn = 'X';\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    const _this$props3 = this.props,\n          pubnub = _this$props3.pubnub,\n          gameChannel = _this$props3.gameChannel,\n          piece = _this$props3.piece,\n          myTurn = _this$props3.myTurn,\n          endGame = _this$props3.endGame;\n    pubnub.getMessage(gameChannel, msg => {\n      // Publish move to the opponent's board\n      if (msg.message.turn === piece) {\n        this.publishMove(msg.message.index, msg.message.piece);\n      } // Start a new round\n      else if (msg.message.reset) {\n          this.setState({\n            squares: Array(9).fill(''),\n            whosTurn: myTurn\n          });\n          this.turn = 'X';\n          this.gameOver = false;\n          this.counter = 0;\n          Swal.close();\n        } // End the game and go back to the lobby\n        else if (msg.message.endGame) {\n            Swal.close();\n            endGame();\n          }\n    });\n  }\n\n  render() {\n    let status;\n    const _this$state4 = this.state,\n          whosTurn = _this$state4.whosTurn,\n          squares = _this$state4.squares,\n          xScore = _this$state4.xScore,\n          oScore = _this$state4.oScore; // Change to current player's turn\n\n    status = \"\".concat(whosTurn ? 'Your turn' : \"Opponent's turn\");\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: squares,\n      onClick: index => this.onMakeMove(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"status-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, status)), React.createElement(\"div\", {\n      className: \"scores-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Player X: \", xScore, \" \")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Player O: \", oScore, \" \"))));\n  }\n\n}\n\nexport default GameOnline;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/containers/GameOnline/GameOnline.js"],"names":["React","Swal","Board","GameOnline","Component","constructor","props","newRound","winner","title","isRoomCreator","pubnub","gameChannel","gameOver","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","turn","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","value","publish","message","reset","channel","endGame","announceWinner","state","xScore","oScore","pieces","X","O","setState","checkForWinner","squares","possibleCombinations","i","length","a","b","c","counter","publishMove","index","piece","whosTurn","onMakeMove","myTurn","Array","fill","componentDidMount","getMessage","msg","close","render","status"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA4CnBC,QA5CmB,GA4CRC,MAAM,IAAI;AACnB,YAAMC,KAAK,GAAGD,MAAM,KAAK,IAAX,GAAkB,WAAlB,oBAA0CA,MAA1C,UAAd,CADmB,CAEnB;;AAFmB,0BAG4B,KAAKF,KAHjC;AAAA,YAGXI,aAHW,eAGXA,aAHW;AAAA,YAGIC,MAHJ,eAGIA,MAHJ;AAAA,YAGYC,WAHZ,eAGYA,WAHZ;;AAInB,UAAIF,aAAa,KAAK,KAAlB,IAA2B,KAAKG,QAApC,EAA8C;AAC5CZ,QAAAA,IAAI,CAACa,IAAL,CAAU;AACRC,UAAAA,QAAQ,EAAE,KADF;AAERC,UAAAA,iBAAiB,EAAE,KAFX;AAGRP,UAAAA,KAHQ;AAIRQ,UAAAA,IAAI,EAAE,4BAJE;AAKRC,UAAAA,kBAAkB,EAAE,gBALZ;AAMRC,UAAAA,KAAK,EAAE,GANC;AAORC,UAAAA,WAAW,EAAE;AACXC,YAAAA,UAAU,EAAE,KADD;AAEXZ,YAAAA,KAAK,EAAE,aAFI;AAGXa,YAAAA,KAAK,EAAE,aAHI;AAIXC,YAAAA,aAAa,EAAE;AAJJ;AAPL,SAAV;AAcA,aAAKC,IAAL,GAAY,GAAZ,CAf4C,CAe3B;AAClB,OAhBD,CAkBA;AAlBA,WAmBK,IAAId,aAAa,IAAI,KAAKG,QAA1B,EAAoC;AACvCZ,UAAAA,IAAI,CAACa,IAAL,CAAU;AACRC,YAAAA,QAAQ,EAAE,KADF;AAERC,YAAAA,iBAAiB,EAAE,KAFX;AAGRP,YAAAA,KAHQ;AAIRQ,YAAAA,IAAI,EAAE,mBAJE;AAKRQ,YAAAA,gBAAgB,EAAE,IALV;AAMRP,YAAAA,kBAAkB,EAAE,gBANZ;AAORQ,YAAAA,iBAAiB,EAAE,MAPX;AAQRC,YAAAA,gBAAgB,EAAE,MARV;AASRC,YAAAA,iBAAiB,EAAE,MATX;AAURT,YAAAA,KAAK,EAAE,GAVC;AAWRC,YAAAA,WAAW,EAAE;AACXC,cAAAA,UAAU,EAAE,KADD;AAEXZ,cAAAA,KAAK,EAAE,aAFI;AAGXa,cAAAA,KAAK,EAAE,aAHI;AAIXC,cAAAA,aAAa,EAAE,cAJJ;AAKXM,cAAAA,YAAY,EAAE;AALH;AAXL,WAAV,EAkBGC,IAlBH,CAkBQC,MAAM,IAAI;AAChB;AACA,gBAAIA,MAAM,CAACC,KAAX,EAAkB;AAChBrB,cAAAA,MAAM,CAACsB,OAAP,CAAe;AACbC,gBAAAA,OAAO,EAAE;AACPC,kBAAAA,KAAK,EAAE;AADA,iBADI;AAIbC,gBAAAA,OAAO,EAAExB;AAJI,eAAf;AAMD,aAPD,MAOO;AACL;AACAD,cAAAA,MAAM,CAACsB,OAAP,CAAe;AACbC,gBAAAA,OAAO,EAAE;AACPG,kBAAAA,OAAO,EAAE;AADF,iBADI;AAIbD,gBAAAA,OAAO,EAAExB;AAJI,eAAf;AAMD;AACF,WApCD;AAqCD;AACF,KA1GkB;;AAAA,SA6GnB0B,cA7GmB,GA6GF9B,MAAM,IAAI;AAAA,0BACE,KAAK+B,KADP;AAAA,YACjBC,MADiB,eACjBA,MADiB;AAAA,YACTC,MADS,eACTA,MADS;AAEzB,YAAMC,MAAM,GAAG;AACbC,QAAAA,CAAC,EAAEH,MADU;AAEbI,QAAAA,CAAC,EAAEH;AAFU,OAAf;;AAKA,UAAIjC,MAAM,KAAK,GAAf,EAAoB;AAClBkC,QAAAA,MAAM,CAACC,CAAP,IAAY,CAAZ;AACA,aAAKE,QAAL,CAAc;AACZL,UAAAA,MAAM,EAAEE,MAAM,CAACC;AADH,SAAd;AAGD,OALD,MAKO;AACLD,QAAAA,MAAM,CAACE,CAAP,IAAY,CAAZ;AACA,aAAKC,QAAL,CAAc;AACZJ,UAAAA,MAAM,EAAEC,MAAM,CAACE;AADH,SAAd;AAGD,OAjBwB,CAkBzB;;;AACA,WAAK/B,QAAL,GAAgB,IAAhB;AACA,WAAKN,QAAL,CAAcC,MAAd;AACD,KAlIkB;;AAAA,SAoInBsC,cApImB,GAoIFC,OAAO,IAAI;AAC1B;AACA,YAAMC,oBAAoB,GAAG,CAC3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAD2B,EAE3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAF2B,EAG3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH2B,EAI3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJ2B,EAK3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAL2B,EAM3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAN2B,EAO3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAP2B,EAQ3B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAR2B,CAA7B,CAF0B,CAa1B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,oBAAoB,CAACE,MAAzC,EAAiDD,CAAC,IAAI,CAAtD,EAAyD;AAAA,qDACrCD,oBAAoB,CAACC,CAAD,CADiB;AAAA,cAChDE,CADgD;AAAA,cAC7CC,CAD6C;AAAA,cAC1CC,CAD0C;;AAEvD,YACEN,OAAO,CAACI,CAAD,CAAP,IACAJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CADtB,IAEAL,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACM,CAAD,CAHxB,EAIE;AACA,eAAKf,cAAL,CAAoBS,OAAO,CAACI,CAAD,CAA3B;AACA;AACD;AACF,OAxByB,CA0B1B;;;AACA,WAAKG,OAAL,IAAgB,CAAhB,CA3B0B,CA4B1B;;AACA,UAAI,KAAKA,OAAL,KAAiB,CAArB,EAAwB;AACtB,aAAKzC,QAAL,GAAgB,IAAhB;AACA,aAAKN,QAAL,CAAc,IAAd;AACD;AACF,KArKkB;;AAAA,SAwKnBgD,WAxKmB,GAwKL,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAAA,2BACA,KAAKlB,KADL;AAAA,YACtBQ,OADsB,gBACtBA,OADsB;AAAA,YACbW,QADa,gBACbA,QADa;AAG9BX,MAAAA,OAAO,CAACS,KAAD,CAAP,GAAiBC,KAAjB;AACA,WAAKjC,IAAL,GAAYuB,OAAO,CAACS,KAAD,CAAP,KAAmB,GAAnB,GAAyB,GAAzB,GAA+B,GAA3C;AAEA,WAAKX,QAAL,CAAc;AACZE,QAAAA,OADY;AAEZW,QAAAA,QAAQ,EAAE,CAACA;AAFC,OAAd;AAKA,WAAKZ,cAAL,CAAoBC,OAApB;AACD,KApLkB;;AAAA,SAsLnBY,UAtLmB,GAsLNH,KAAK,IAAI;AAAA,2BACU,KAAKjB,KADf;AAAA,YACZQ,OADY,gBACZA,OADY;AAAA,YACHW,QADG,gBACHA,QADG;AAAA,2BAEmB,KAAKpD,KAFxB;AAAA,YAEZmD,KAFY,gBAEZA,KAFY;AAAA,YAEL9C,MAFK,gBAELA,MAFK;AAAA,YAEGC,WAFH,gBAEGA,WAFH,EAIpB;;AACA,UAAI,CAACmC,OAAO,CAACS,KAAD,CAAR,IAAmB,KAAKhC,IAAL,KAAciC,KAArC,EAA4C;AAC1CV,QAAAA,OAAO,CAACS,KAAD,CAAP,GAAiBC,KAAjB;AAEA,aAAKZ,QAAL,CAAc;AACZE,UAAAA,OADY;AAEZW,UAAAA,QAAQ,EAAE,CAACA;AAFC,SAAd,EAH0C,CAQ1C;;AACA,aAAKlC,IAAL,GAAY,KAAKA,IAAL,KAAc,GAAd,GAAoB,GAApB,GAA0B,GAAtC,CAT0C,CAW1C;;AACAb,QAAAA,MAAM,CAACsB,OAAP,CAAe;AACbC,UAAAA,OAAO,EAAE;AACPsB,YAAAA,KADO;AAEPC,YAAAA,KAFO;AAGPjC,YAAAA,IAAI,EAAE,KAAKA;AAHJ,WADI;AAMbY,UAAAA,OAAO,EAAExB;AANI,SAAf,EAZ0C,CAqB1C;;AACA,aAAKkC,cAAL,CAAoBC,OAApB;AACD;AACF,KAnNkB;;AAAA,UAETa,MAFS,GAEE,KAAKtD,KAFP,CAETsD,MAFS;AAGjB,SAAKrB,KAAL,GAAa;AACXQ,MAAAA,OAAO,EAAEc,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CADE;AACiB;AAC5BtB,MAAAA,MAAM,EAAE,CAFG;AAGXC,MAAAA,MAAM,EAAE,CAHG;AAIXiB,MAAAA,QAAQ,EAAEE;AAJC,KAAb;AAOA,SAAKpC,IAAL,GAAY,GAAZ;AACA,SAAKX,QAAL,GAAgB,KAAhB;AACA,SAAKyC,OAAL,GAAe,CAAf;AACD;;AAEDS,EAAAA,iBAAiB,GAAG;AAAA,yBACsC,KAAKzD,KAD3C;AAAA,UACVK,MADU,gBACVA,MADU;AAAA,UACFC,WADE,gBACFA,WADE;AAAA,UACW6C,KADX,gBACWA,KADX;AAAA,UACkBG,MADlB,gBACkBA,MADlB;AAAA,UAC0BvB,OAD1B,gBAC0BA,OAD1B;AAElB1B,IAAAA,MAAM,CAACqD,UAAP,CAAkBpD,WAAlB,EAA+BqD,GAAG,IAAI;AACpC;AACA,UAAIA,GAAG,CAAC/B,OAAJ,CAAYV,IAAZ,KAAqBiC,KAAzB,EAAgC;AAC9B,aAAKF,WAAL,CAAiBU,GAAG,CAAC/B,OAAJ,CAAYsB,KAA7B,EAAoCS,GAAG,CAAC/B,OAAJ,CAAYuB,KAAhD;AACD,OAFD,CAIA;AAJA,WAKK,IAAIQ,GAAG,CAAC/B,OAAJ,CAAYC,KAAhB,EAAuB;AAC1B,eAAKU,QAAL,CAAc;AACZE,YAAAA,OAAO,EAAEc,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CADG;AAEZJ,YAAAA,QAAQ,EAAEE;AAFE,WAAd;AAKA,eAAKpC,IAAL,GAAY,GAAZ;AACA,eAAKX,QAAL,GAAgB,KAAhB;AACA,eAAKyC,OAAL,GAAe,CAAf;AACArD,UAAAA,IAAI,CAACiE,KAAL;AACD,SAVI,CAYL;AAZK,aAaA,IAAID,GAAG,CAAC/B,OAAJ,CAAYG,OAAhB,EAAyB;AAC5BpC,YAAAA,IAAI,CAACiE,KAAL;AACA7B,YAAAA,OAAO;AACR;AACF,KAxBD;AAyBD;;AA2KD8B,EAAAA,MAAM,GAAG;AACP,QAAIC,MAAJ;AADO,yBAEuC,KAAK7B,KAF5C;AAAA,UAECmB,QAFD,gBAECA,QAFD;AAAA,UAEWX,OAFX,gBAEWA,OAFX;AAAA,UAEoBP,MAFpB,gBAEoBA,MAFpB;AAAA,UAE4BC,MAF5B,gBAE4BA,MAF5B,EAGP;;AACA2B,IAAAA,MAAM,aAAMV,QAAQ,GAAG,WAAH,GAAiB,iBAA/B,CAAN;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAEX,OAAhB;AAAyB,MAAA,OAAO,EAAES,KAAK,IAAI,KAAKG,UAAL,CAAgBH,KAAhB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BY,MAA5B,CAFF,CADF,EAME;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAc5B,MAAd,MADF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAcC,MAAd,MADF,CALF,CANF,CADF;AAkBD;;AA9OsC;;AAiPzC,eAAetC,UAAf","sourcesContent":["import React from 'react';\nimport Swal from 'sweetalert2';\nimport Board from '../../components/Board';\n\nclass GameOnline extends React.Component {\n  constructor(props) {\n    super(props);\n    const { myTurn } = this.props;\n    this.state = {\n      squares: Array(9).fill(''), // 3x3 board\n      xScore: 0,\n      oScore: 0,\n      whosTurn: myTurn\n    };\n\n    this.turn = 'X';\n    this.gameOver = false;\n    this.counter = 0;\n  }\n\n  componentDidMount() {\n    const { pubnub, gameChannel, piece, myTurn, endGame } = this.props;\n    pubnub.getMessage(gameChannel, msg => {\n      // Publish move to the opponent's board\n      if (msg.message.turn === piece) {\n        this.publishMove(msg.message.index, msg.message.piece);\n      }\n\n      // Start a new round\n      else if (msg.message.reset) {\n        this.setState({\n          squares: Array(9).fill(''),\n          whosTurn: myTurn\n        });\n\n        this.turn = 'X';\n        this.gameOver = false;\n        this.counter = 0;\n        Swal.close();\n      }\n\n      // End the game and go back to the lobby\n      else if (msg.message.endGame) {\n        Swal.close();\n        endGame();\n      }\n    });\n  }\n\n  newRound = winner => {\n    const title = winner === null ? 'Tie game!' : `Player ${winner} won!`;\n    // Show this if the player is not the room creator\n    const { isRoomCreator, pubnub, gameChannel } = this.props;\n    if (isRoomCreator === false && this.gameOver) {\n      Swal.fire({\n        position: 'top',\n        allowOutsideClick: false,\n        title,\n        text: 'Waiting for a new round...',\n        confirmButtonColor: 'rgb(208,33,41)',\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: 'title-class',\n          popup: 'popup-class',\n          confirmButton: 'button-class'\n        }\n      });\n      this.turn = 'X'; // Set turn to X so Player O can't make a move\n    }\n\n    // Show this to the room creator\n    else if (isRoomCreator && this.gameOver) {\n      Swal.fire({\n        position: 'top',\n        allowOutsideClick: false,\n        title,\n        text: 'Continue Playing?',\n        showCancelButton: true,\n        confirmButtonColor: 'rgb(208,33,41)',\n        cancelButtonColor: '#aaa',\n        cancelButtonText: 'Nope',\n        confirmButtonText: 'Yea!',\n        width: 275,\n        customClass: {\n          heightAuto: false,\n          title: 'title-class',\n          popup: 'popup-class',\n          confirmButton: 'button-class',\n          cancelButton: 'button-class'\n        }\n      }).then(result => {\n        // Start a new round\n        if (result.value) {\n          pubnub.publish({\n            message: {\n              reset: true\n            },\n            channel: gameChannel\n          });\n        } else {\n          // End the game\n          pubnub.publish({\n            message: {\n              endGame: true\n            },\n            channel: gameChannel\n          });\n        }\n      });\n    }\n  };\n\n  // Update score for the winner\n  announceWinner = winner => {\n    const { xScore, oScore } = this.state;\n    const pieces = {\n      X: xScore,\n      O: oScore\n    };\n\n    if (winner === 'X') {\n      pieces.X += 1;\n      this.setState({\n        xScore: pieces.X\n      });\n    } else {\n      pieces.O += 1;\n      this.setState({\n        oScore: pieces.O\n      });\n    }\n    // End the game once there is a winner\n    this.gameOver = true;\n    this.newRound(winner);\n  };\n\n  checkForWinner = squares => {\n    // Possible winning combinations\n    const possibleCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    // Iterate every combination to see if there is a match\n    for (let i = 0; i < possibleCombinations.length; i += 1) {\n      const [a, b, c] = possibleCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        this.announceWinner(squares[a]);\n        return;\n      }\n    }\n\n    // Check if the game ends in a draw\n    this.counter += 1;\n    // The board is filled up and there is no winner\n    if (this.counter === 9) {\n      this.gameOver = true;\n      this.newRound(null);\n    }\n  };\n\n  // Opponent's move is published to the board\n  publishMove = (index, piece) => {\n    const { squares, whosTurn } = this.state;\n\n    squares[index] = piece;\n    this.turn = squares[index] === 'X' ? 'O' : 'X';\n\n    this.setState({\n      squares,\n      whosTurn: !whosTurn\n    });\n\n    this.checkForWinner(squares);\n  };\n\n  onMakeMove = index => {\n    const { squares, whosTurn } = this.state;\n    const { piece, pubnub, gameChannel } = this.props;\n\n    // Check if the square is empty and if it's the player's turn to make a move\n    if (!squares[index] && this.turn === piece) {\n      squares[index] = piece;\n\n      this.setState({\n        squares,\n        whosTurn: !whosTurn\n      });\n\n      // Other player's turn to make a move\n      this.turn = this.turn === 'X' ? 'O' : 'X';\n\n      // Publish move to the channel\n      pubnub.publish({\n        message: {\n          index,\n          piece,\n          turn: this.turn\n        },\n        channel: gameChannel\n      });\n\n      // Check if there is a winner\n      this.checkForWinner(squares);\n    }\n  };\n\n  render() {\n    let status;\n    const { whosTurn, squares, xScore, oScore } = this.state;\n    // Change to current player's turn\n    status = `${whosTurn ? 'Your turn' : \"Opponent's turn\"}`;\n\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board squares={squares} onClick={index => this.onMakeMove(index)} />\n          <p className=\"status-info\">{status}</p>\n        </div>\n\n        <div className=\"scores-container\">\n          <div>\n            <p>Player X: {xScore} </p>\n          </div>\n\n          <div>\n            <p>Player O: {oScore} </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameOnline;\n"]},"metadata":{},"sourceType":"module"}