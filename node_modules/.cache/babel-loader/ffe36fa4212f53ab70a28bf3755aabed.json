{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMessage = getMessage;\n\nvar _immutabilityHelper = require('immutability-helper');\n\nvar _immutabilityHelper2 = _interopRequireDefault(_immutabilityHelper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction init(component, channel) {\n  if (component.state.pn_messages[channel]) {\n    return false;\n  } else {\n    component.setState(function (prevState) {\n      return {\n        pn_messages: (0, _immutabilityHelper2.default)(prevState.pn_messages, {\n          $merge: _defineProperty({}, channel, [])\n        })\n      };\n    });\n    return true;\n  }\n}\n\nfunction emit(instance, channel, message) {\n  var messages = instance._component.state.pn_messages[channel];\n  var keepMessages = instance._keepMessages[channel];\n  messages.push(message);\n\n  if (keepMessages && messages.length > keepMessages) {\n    messages = messages.slice(messages.length - keepMessages);\n  }\n\n  instance._component.setState(function (prevState) {\n    return {\n      pn_messages: (0, _immutabilityHelper2.default)(prevState.pn_messages, _defineProperty({}, channel, {\n        $set: messages\n      }))\n    };\n  });\n\n  instance._broadcast.emit('message', channel, message);\n}\n\nfunction getMessage(channel) {\n  var _this = this;\n\n  var component = this._component;\n  var callback = void 0;\n  var keepMessages = 100;\n\n  if (arguments.length === 2 && typeof arguments[1] === 'function') {\n    callback = arguments[1];\n  } else if (arguments.length === 2 && typeof arguments[1] === 'number') {\n    keepMessages = arguments[1];\n  } else if (arguments.length === 3) {\n    callback = arguments[1];\n    keepMessages = arguments[2];\n  }\n\n  if (init(component, channel)) {\n    this._keepMessages[channel] = keepMessages;\n\n    this._autoload.getHistory(channel, callback);\n  }\n\n  this._broadcast.message(channel, callback);\n\n  if (!this._listener.message) {\n    this._listener.message = function (message) {\n      if (message.subscription && _this._broadcast.isSubscribe('message', message.subscription)) {\n        emit(_this, message.subscription, message);\n      }\n\n      if (message.channel && _this._broadcast.isSubscribe('message', message.channel)) {\n        emit(_this, message.channel, message);\n      }\n    };\n  }\n\n  if (component.state && component.state.pn_messages && component.state.pn_messages[channel]) {\n    return component.state.pn_messages[channel];\n  } else {\n    return [];\n  }\n}","map":null,"metadata":{},"sourceType":"script"}