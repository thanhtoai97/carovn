{"ast":null,"code":"/* eslint-disable camelcase */\nimport userService from '../service/index'; // import axios from 'axios';\n\nimport * as ActionsTypes from '../constants/actionsType';\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n});\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nconst register_Success = user => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  user\n});\n\nconst register_Pending = user => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  user\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(register_Pending(user));\n    userService.register(user).then(() => {\n      dispatch(register_Success());\n    }, error => {\n      dispatch(register_Error(error.toString()));\n    });\n  };\n}\n\nexport default register;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["userService","ActionsTypes","register_Success","user","type","AUTH_REGISTER_SUCCESS","register_Pending","AUTH_REGISTER_PENDING","register_Error","error","AUTH_REGISTER_ERROR","register","dispatch","then","toString"],"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,kBAAxB,C,CAEA;;AACA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,MAAMC,gBAAgB,GAAGC,IAAI,KAAK;AAChCC,EAAAA,IAAI,EAAEH,YAAY,CAACI,qBADa;AAEhCF,EAAAA;AAFgC,CAAL,CAA7B;;AAKA,MAAMG,gBAAgB,GAAGH,IAAI,KAAK;AAChCC,EAAAA,IAAI,EAAEH,YAAY,CAACM,qBADa;AAEhCJ,EAAAA;AAFgC,CAAL,CAA7B;;AAKA,MAAMK,cAAc,GAAGC,KAAK,KAAK;AAC/BL,EAAAA,IAAI,EAAEH,YAAY,CAACS,mBADY;AAE/BD,EAAAA;AAF+B,CAAL,CAA5B;;AAIA,SAASE,QAAT,CAAkBR,IAAlB,EAAwB;AACtB,SAAOS,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACN,gBAAgB,CAACH,IAAD,CAAjB,CAAR;AAEAH,IAAAA,WAAW,CAACW,QAAZ,CAAqBR,IAArB,EAA2BU,IAA3B,CACE,MAAM;AACJD,MAAAA,QAAQ,CAACV,gBAAgB,EAAjB,CAAR;AACD,KAHH,EAIEO,KAAK,IAAI;AACPG,MAAAA,QAAQ,CAACJ,cAAc,CAACC,KAAK,CAACK,QAAN,EAAD,CAAf,CAAR;AACD,KANH;AAQD,GAXD;AAYD;;AAED,eAAeH,QAAf","sourcesContent":["/* eslint-disable camelcase */\nimport userService from '../service/index';\n\n// import axios from 'axios';\nimport * as ActionsTypes from '../constants/actionsType';\n\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n});\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nconst register_Success = user => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  user\n});\n\nconst register_Pending = user => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  user\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\nfunction register(user) {\n  return dispatch => {\n    dispatch(register_Pending(user));\n\n    userService.register(user).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n}\n\nexport default register;\n"]},"metadata":{},"sourceType":"module"}