{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios';\nimport * as ActionsTypes from '../constants/actionsType';\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst register_Success = registered => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  registered\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(user).then(user => {\n      dispatch(success());\n    }, error => {\n      dispatch(failure(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nexport default register;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["axios","ActionsTypes","register","user","dispatch","request","userService","then","success","error","failure","toString","type","userConstants","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACC,OAAO,CAACF,IAAD,CAAR,CAAR;AAEAG,IAAAA,WAAW,CAACJ,QAAZ,CAAqBC,IAArB,EAA2BI,IAA3B,CACEJ,IAAI,IAAI;AACNC,MAAAA,QAAQ,CAACI,OAAO,EAAR,CAAR;AACD,KAHH,EAIEC,KAAK,IAAI;AACPL,MAAAA,QAAQ,CAACM,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACD,KANH;AAQD,GAXD;;AAaA,WAASN,OAAT,CAAiBF,IAAjB,EAAuB;AACrB,WAAO;AAAES,MAAAA,IAAI,EAAEC,aAAa,CAACC,gBAAtB;AAAwCX,MAAAA;AAAxC,KAAP;AACD;;AACD,WAASK,OAAT,CAAiBL,IAAjB,EAAuB;AACrB,WAAO;AAAES,MAAAA,IAAI,EAAEC,aAAa,CAACE,gBAAtB;AAAwCZ,MAAAA;AAAxC,KAAP;AACD;;AACD,WAASO,OAAT,CAAiBD,KAAjB,EAAwB;AACtB,WAAO;AAAEG,MAAAA,IAAI,EAAEC,aAAa,CAACG,gBAAtB;AAAwCP,MAAAA;AAAxC,KAAP;AACD;AACF;;AACD,eAAeP,QAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\nimport * as ActionsTypes from '../constants/actionsType';\n\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst register_Success = registered => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  registered\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n\n    userService.register(user).then(\n      user => {\n        dispatch(success());\n      },\n      error => {\n        dispatch(failure(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.REGISTER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.REGISTER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.REGISTER_FAILURE, error };\n  }\n}\nexport default register;\n"]},"metadata":{},"sourceType":"module"}