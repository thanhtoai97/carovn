{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js\";\n\n/* eslint-disable react/jsx-props-no-spreading */\n\n/* eslint-disable react/state-in-constructor */\n\n/* eslint-disable no-shadow */\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button, Select, AutoComplete, Tooltip, Icon, Row, Col, message } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\nimport './register.css';\n/*\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmDirty: false,\n      email: '',\n      name: '',\n      password: ''\n    };\n  }\n\n  handleSubmit = e => {\n    const { form, registerAsync } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        message.loading('You Are You Registering....', 2.5).then(() => {\n          message.success('You Are Logged In!', 1.0);\n          window.location.href = '/';\n        });\n        registerAsync(values.name, values.email, values.password);\n      }\n    });\n\n    \n    e.preventDefault();\n    const apiBaseUrl = 'http://localhost:3002/users/';\n    const { name, email, password } = this.state;\n    const data = {\n      name,\n      user_email: email,\n      password\n    };\n\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    axios\n      .post(`${apiBaseUrl}register`, data, { headers })\n      .then(response => {\n        if (response.data.success) {\n          localStorage.setItem(\n            'u_code',\n            encodeURIComponent(JSON.stringify(response.data.data))\n          );\n          localStorage.setItem('is_done', true);\n          message.loading('You Are You Logging IN....', 2.5).then(() => {\n            message.success('You Are Logged In!', 1.0);\n            window.location.href = '/login';\n          });\n        } else {\n          message.loading('You Are You Logging IN....', 2.5).then(() => {\n            message.success(response.data.message, 1.0);\n            window.location.href = '/register';\n          });\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n      \n  };\n\n  handleConfirmBlur = e => {\n    const { confirmDirty } = this.state;\n    const { value } = e.target;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { confirmDirty } = this.state;\n    const { form } = this.props;\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { form } = this.props;\n    const { getFieldDecorator } = form;\n\n    return (\n      <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Item label=\"Name\">\n            {getFieldDecorator('name', {\n              rules: [\n                {\n                  type: 'name',\n                  message: 'The input is not valid Name!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your Name!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Password\" hasFeedback>\n            {getFieldDecorator('password', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                },\n                {\n                  validator: this.validateToNextPassword\n                }\n              ]\n            })(<Input.Password />)}\n          </Form.Item>\n\n          <Form.Item>\n            {getFieldDecorator('agreement', {\n              valuePropName: 'checked'\n            })(\n              <Checkbox>\n                I have read the <a href=\"boo\">agreement</a>\n              </Checkbox>\n            )}\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Register\n            </Button>\n          </Form.Item>\n        </Form>\n      </article>\n    );\n  }\n}\n*/\n\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      const form = this.props.form;\n      e.preventDefault();\n      form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          // registerAsync(values.name, values.email, values.password);\n          const apiBaseUrl = 'http://localhost:5000/users/';\n          const data = {\n            email: values.email,\n            password: values.password,\n            name: values.name\n          };\n          const headers = {\n            'Content-Type': 'application/json'\n          };\n          axios.post(\"\".concat(apiBaseUrl, \"register\"), {\n            data\n          }, {\n            headers\n          }).then(response => {\n            localStorage.setItem('u_code', encodeURIComponent(JSON.stringify(response.data.data))); // localStorage.setItem('is_done', true);\n\n            message.loading('You Are Registering....', 2.5).then(() => {\n              message.success('You Are Logged In!', 1.0);\n            });\n          }).then(response => {\n            return response.JSON();\n          }).catch(() => {\n            message.loading('Error!....', 2.5).then(() => {\n              window.location.href = '/#login';\n            });\n          });\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const confirmDirty = this.state.confirmDirty;\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const confirmDirty = this.state.confirmDirty;\n      const form = this.props.form;\n\n      if (value && confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const form = this.props.form;\n    const getFieldDecorator = form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, \"+86\"), React.createElement(Option, {\n      value: \"87\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"+87\")));\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, website));\n    return React.createElement(\"article\", {\n      className: \"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      rules: [{\n        required: true,\n        message: 'Please input your name!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete, {\n      dataSource: websiteOptions,\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, getFieldDecorator('captcha', {\n      rules: [{\n        required: true,\n        message: 'Please input the captcha you got!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"ddd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"Register\"))));\n  }\n\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) => dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(mapStateToProps, matchDispatchToProps)(form);","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js"],"names":["React","axios","connect","Form","Input","Checkbox","Button","Select","AutoComplete","Tooltip","Icon","Row","Col","message","registerAsync","Option","AutoCompleteOption","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","form","props","preventDefault","validateFieldsAndScroll","err","values","apiBaseUrl","data","email","password","name","headers","post","then","response","localStorage","setItem","encodeURIComponent","JSON","stringify","loading","success","catch","window","location","href","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","rules","type","required","validator","whitespace","valuePropName","create","mapStateToProps","registering","matchDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/state-in-constructor */\n/* eslint-disable no-shadow */\nimport React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  Input,\n  Checkbox,\n  Button,\n  Select,\n  AutoComplete,\n  Tooltip,\n  Icon,\n  Row,\n  Col,\n  message\n} from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\nimport './register.css';\n/*\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmDirty: false,\n      email: '',\n      name: '',\n      password: ''\n    };\n  }\n\n  handleSubmit = e => {\n    const { form, registerAsync } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        message.loading('You Are You Registering....', 2.5).then(() => {\n          message.success('You Are Logged In!', 1.0);\n          window.location.href = '/';\n        });\n        registerAsync(values.name, values.email, values.password);\n      }\n    });\n\n    \n    e.preventDefault();\n    const apiBaseUrl = 'http://localhost:3002/users/';\n    const { name, email, password } = this.state;\n    const data = {\n      name,\n      user_email: email,\n      password\n    };\n\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    axios\n      .post(`${apiBaseUrl}register`, data, { headers })\n      .then(response => {\n        if (response.data.success) {\n          localStorage.setItem(\n            'u_code',\n            encodeURIComponent(JSON.stringify(response.data.data))\n          );\n          localStorage.setItem('is_done', true);\n          message.loading('You Are You Logging IN....', 2.5).then(() => {\n            message.success('You Are Logged In!', 1.0);\n            window.location.href = '/login';\n          });\n        } else {\n          message.loading('You Are You Logging IN....', 2.5).then(() => {\n            message.success(response.data.message, 1.0);\n            window.location.href = '/register';\n          });\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n      \n  };\n\n  handleConfirmBlur = e => {\n    const { confirmDirty } = this.state;\n    const { value } = e.target;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { confirmDirty } = this.state;\n    const { form } = this.props;\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { form } = this.props;\n    const { getFieldDecorator } = form;\n\n    return (\n      <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Item label=\"Name\">\n            {getFieldDecorator('name', {\n              rules: [\n                {\n                  type: 'name',\n                  message: 'The input is not valid Name!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your Name!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Password\" hasFeedback>\n            {getFieldDecorator('password', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                },\n                {\n                  validator: this.validateToNextPassword\n                }\n              ]\n            })(<Input.Password />)}\n          </Form.Item>\n\n          <Form.Item>\n            {getFieldDecorator('agreement', {\n              valuePropName: 'checked'\n            })(\n              <Checkbox>\n                I have read the <a href=\"boo\">agreement</a>\n              </Checkbox>\n            )}\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Register\n            </Button>\n          </Form.Item>\n        </Form>\n      </article>\n    );\n  }\n}\n*/\n\nconst { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: []\n  };\n\n  handleSubmit = e => {\n    const { form } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        // registerAsync(values.name, values.email, values.password);\n\n        const apiBaseUrl = 'http://localhost:5000/users/';\n        const data = {\n          email: values.email,\n          password: values.password,\n          name: values.name\n        };\n\n        const headers = {\n          'Content-Type': 'application/json'\n        };\n        axios\n          .post(`${apiBaseUrl}register`, { data }, { headers })\n          .then(response => {\n            localStorage.setItem(\n              'u_code',\n              encodeURIComponent(JSON.stringify(response.data.data))\n            );\n            // localStorage.setItem('is_done', true);\n            message.loading('You Are Registering....', 2.5).then(() => {\n              message.success('You Are Logged In!', 1.0);\n            });\n          })\n          .then(response => {\n            return response.JSON();\n          })\n          .catch(() => {\n            message.loading('Error!....', 2.5).then(() => {\n              window.location.href = '/#login';\n            });\n          });\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { confirmDirty } = this.state;\n    const { value } = e.target;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { confirmDirty } = this.state;\n    const { form } = this.props;\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  handleWebsiteChange = value => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(\n        domain => `${value}${domain}`\n      );\n    }\n    this.setState({ autoCompleteResult });\n  };\n\n  render() {\n    const { form } = this.props;\n    const { getFieldDecorator } = form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 }\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>\n    );\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <article className=\"mw5 center bg-white br3 pa3 pa4-ns mv3 ba b--black-10\">\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n          <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!'\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!'\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Password\" hasFeedback>\n            {getFieldDecorator('password', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your password!'\n                },\n                {\n                  validator: this.validateToNextPassword\n                }\n              ]\n            })(<Input.Password />)}\n          </Form.Item>\n          <Form.Item label=\"Confirm Password\" hasFeedback>\n            {getFieldDecorator('confirm', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please confirm your password!'\n                },\n                {\n                  validator: this.compareToFirstPassword\n                }\n              ]\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n          </Form.Item>\n          <Form.Item\n            label={\n              <span>\n                Nickname&nbsp;\n                <Tooltip title=\"What do you want others to call you?\">\n                  <Icon type=\"question-circle-o\" />\n                </Tooltip>\n              </span>\n            }\n          >\n            {getFieldDecorator('name', {\n              rules: [\n                {\n                  required: true,\n                  message: 'Please input your name!',\n                  whitespace: true\n                }\n              ]\n            })(<Input />)}\n          </Form.Item>\n\n          <Form.Item label=\"Phone Number\">\n            {getFieldDecorator('phone', {\n              rules: [\n                { required: true, message: 'Please input your phone number!' }\n              ]\n            })(\n              <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\n            )}\n          </Form.Item>\n          <Form.Item label=\"Website\">\n            {getFieldDecorator('website', {\n              rules: [{ required: true, message: 'Please input website!' }]\n            })(\n              <AutoComplete\n                dataSource={websiteOptions}\n                onChange={this.handleWebsiteChange}\n                placeholder=\"website\"\n              >\n                <Input />\n              </AutoComplete>\n            )}\n          </Form.Item>\n          <Form.Item\n            label=\"Captcha\"\n            extra=\"We must make sure that your are a human.\"\n          >\n            <Row gutter={8}>\n              <Col span={12}>\n                {getFieldDecorator('captcha', {\n                  rules: [\n                    {\n                      required: true,\n                      message: 'Please input the captcha you got!'\n                    }\n                  ]\n                })(<Input />)}\n              </Col>\n              <Col span={12}>\n                <Button>Get captcha</Button>\n              </Col>\n            </Row>\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            {getFieldDecorator('agreement', {\n              valuePropName: 'checked'\n            })(\n              <Checkbox>\n                I have read the <a href=\"ddd\">agreement</a>\n              </Checkbox>\n            )}\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Register\n            </Button>\n          </Form.Item>\n        </Form>\n      </article>\n    );\n  }\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  registering: state.registering\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) =>\n    dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(form);\n"]},"metadata":{},"sourceType":"module"}