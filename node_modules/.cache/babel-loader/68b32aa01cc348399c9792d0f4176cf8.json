{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/components/Board.js\";\n\n/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport Square from './Square';\n\nconst Board = props => {\n  const checkWinningCell = cell => {\n    let winningRow = [];\n\n    if (props.winningRow) {\n      winningRow = props.winningRow.filter(winningCell => winningCell === cell).length > 0 ? 'win' : '';\n    }\n\n    return winningRow;\n  };\n\n  const checkAvailability = () => {\n    const versus = props.versus,\n          playerStarts = props.playerStarts,\n          xIsNext = props.xIsNext;\n\n    if (props.gameEnd) {\n      return false;\n    }\n\n    if (versus === 'A') {\n      return playerStarts && xIsNext || !playerStarts && !xIsNext;\n    }\n\n    if (versus === 'P') {\n      return true;\n    }\n\n    return false;\n  };\n\n  const squares = props.squares;\n  return React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, squares.map((value, square) => {\n    return React.createElement(Square, {\n      key: square,\n      id: square,\n      className: checkWinningCell(squares),\n      available: checkAvailability(),\n      xIsNext: props.xIsNext,\n      value: props.squares[square],\n      onClick: () => props.playerMove(square),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/components/Board.js"],"names":["React","Square","Board","props","checkWinningCell","cell","winningRow","filter","winningCell","length","checkAvailability","versus","playerStarts","xIsNext","gameEnd","squares","map","value","square","playerMove"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB,QAAMC,gBAAgB,GAAGC,IAAI,IAAI;AAC/B,QAAIC,UAAU,GAAG,EAAjB;;AACA,QAAIH,KAAK,CAACG,UAAV,EAAsB;AACpBA,MAAAA,UAAU,GACRH,KAAK,CAACG,UAAN,CAAiBC,MAAjB,CAAwBC,WAAW,IAAIA,WAAW,KAAKH,IAAvD,EAA6DI,MAA7D,GAAsE,CAAtE,GACI,KADJ,GAEI,EAHN;AAID;;AACD,WAAOH,UAAP;AACD,GATD;;AAUA,QAAMI,iBAAiB,GAAG,MAAM;AAAA,UACtBC,MADsB,GACYR,KADZ,CACtBQ,MADsB;AAAA,UACdC,YADc,GACYT,KADZ,CACdS,YADc;AAAA,UACAC,OADA,GACYV,KADZ,CACAU,OADA;;AAE9B,QAAIV,KAAK,CAACW,OAAV,EAAmB;AACjB,aAAO,KAAP;AACD;;AACD,QAAIH,MAAM,KAAK,GAAf,EAAoB;AAClB,aAAQC,YAAY,IAAIC,OAAjB,IAA8B,CAACD,YAAD,IAAiB,CAACC,OAAvD;AACD;;AACD,QAAIF,MAAM,KAAK,GAAf,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAZD;;AAXqB,QAwBbI,OAxBa,GAwBDZ,KAxBC,CAwBbY,OAxBa;AAyBrB,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACC,GAAR,CAAY,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,WACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,MADP;AAEE,MAAA,EAAE,EAAEA,MAFN;AAGE,MAAA,SAAS,EAAEd,gBAAgB,CAACW,OAAD,CAH7B;AAIE,MAAA,SAAS,EAAEL,iBAAiB,EAJ9B;AAKE,MAAA,OAAO,EAAEP,KAAK,CAACU,OALjB;AAME,MAAA,KAAK,EAAEV,KAAK,CAACY,OAAN,CAAcG,MAAd,CANT;AAOE,MAAA,OAAO,EAAE,MAAMf,KAAK,CAACgB,UAAN,CAAiBD,MAAjB,CAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAZA,CADH,CADF;AAiBD,CA1CD;;AA2CA,eAAehB,KAAf","sourcesContent":["/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport Square from './Square';\n\nconst Board = props => {\n  const checkWinningCell = cell => {\n    let winningRow = [];\n    if (props.winningRow) {\n      winningRow =\n        props.winningRow.filter(winningCell => winningCell === cell).length > 0\n          ? 'win'\n          : '';\n    }\n    return winningRow;\n  };\n  const checkAvailability = () => {\n    const { versus, playerStarts, xIsNext } = props;\n    if (props.gameEnd) {\n      return false;\n    }\n    if (versus === 'A') {\n      return (playerStarts && xIsNext) || (!playerStarts && !xIsNext);\n    }\n    if (versus === 'P') {\n      return true;\n    }\n    return false;\n  };\n  const { squares } = props;\n  return (\n    <div className=\"board-row\">\n      {squares.map((value, square) => {\n        return (\n          <Square\n            key={square}\n            id={square}\n            className={checkWinningCell(squares)}\n            available={checkAvailability()}\n            xIsNext={props.xIsNext}\n            value={props.squares[square]}\n            onClick={() => props.playerMove(square)}\n          />\n        );\n      })}\n    </div>\n  );\n};\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}