{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/components/Board.js\";\n\n/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport Square from './Square';\n\nconst Board = props => {\n  const checkWinningCell = square => {\n    const winningRow = props.winningRow;\n    let winningRows = [];\n\n    if (winningRow) {\n      winningRows = winningRow.filter(winningCell => winningCell === square).length > 0 ? 'win' : '';\n    }\n\n    return winningRows;\n  };\n\n  const checkAvailability = () => {\n    const versus = props.versus,\n          playerStarts = props.playerStarts,\n          xIsNext = props.xIsNext;\n\n    if (props.gameEnd) {\n      return false;\n    }\n\n    if (versus === 'A') {\n      return playerStarts && xIsNext || !playerStarts && !xIsNext;\n    }\n\n    if (versus === 'P') {\n      return true;\n    }\n\n    return false;\n  };\n\n  const squares = props.squares;\n  return React.createElement(\"div\", {\n    className: \"board-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, squares.map((value, square) => {\n    return React.createElement(Square, {\n      key: square.id,\n      id: square,\n      className: checkWinningCell(square),\n      available: checkAvailability(),\n      xIsNext: props.xIsNext,\n      value: props.squares[square],\n      onClick: () => props.playerMove(square),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default Board;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/components/Board.js"],"names":["React","Square","Board","props","checkWinningCell","square","winningRow","winningRows","filter","winningCell","length","checkAvailability","versus","playerStarts","xIsNext","gameEnd","squares","map","value","id","playerMove"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACrB,QAAMC,gBAAgB,GAAGC,MAAM,IAAI;AAAA,UACzBC,UADyB,GACVH,KADU,CACzBG,UADyB;AAEjC,QAAIC,WAAW,GAAG,EAAlB;;AACA,QAAID,UAAJ,EAAgB;AACdC,MAAAA,WAAW,GACTD,UAAU,CAACE,MAAX,CAAkBC,WAAW,IAAIA,WAAW,KAAKJ,MAAjD,EAAyDK,MAAzD,GAAkE,CAAlE,GACI,KADJ,GAEI,EAHN;AAID;;AACD,WAAOH,WAAP;AACD,GAVD;;AAWA,QAAMI,iBAAiB,GAAG,MAAM;AAAA,UACtBC,MADsB,GACYT,KADZ,CACtBS,MADsB;AAAA,UACdC,YADc,GACYV,KADZ,CACdU,YADc;AAAA,UACAC,OADA,GACYX,KADZ,CACAW,OADA;;AAE9B,QAAIX,KAAK,CAACY,OAAV,EAAmB;AACjB,aAAO,KAAP;AACD;;AACD,QAAIH,MAAM,KAAK,GAAf,EAAoB;AAClB,aAAQC,YAAY,IAAIC,OAAjB,IAA8B,CAACD,YAAD,IAAiB,CAACC,OAAvD;AACD;;AACD,QAAIF,MAAM,KAAK,GAAf,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAZD;;AAZqB,QAyBbI,OAzBa,GAyBDb,KAzBC,CAyBba,OAzBa;AA0BrB,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACC,GAAR,CAAY,CAACC,KAAD,EAAQb,MAAR,KAAmB;AAC9B,WACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,MAAM,CAACc,EADd;AAEE,MAAA,EAAE,EAAEd,MAFN;AAGE,MAAA,SAAS,EAAED,gBAAgB,CAACC,MAAD,CAH7B;AAIE,MAAA,SAAS,EAAEM,iBAAiB,EAJ9B;AAKE,MAAA,OAAO,EAAER,KAAK,CAACW,OALjB;AAME,MAAA,KAAK,EAAEX,KAAK,CAACa,OAAN,CAAcX,MAAd,CANT;AAOE,MAAA,OAAO,EAAE,MAAMF,KAAK,CAACiB,UAAN,CAAiBf,MAAjB,CAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAZA,CADH,CADF;AAiBD,CA3CD;;AA4CA,eAAeH,KAAf","sourcesContent":["/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport Square from './Square';\n\nconst Board = props => {\n  const checkWinningCell = square => {\n    const { winningRow } = props;\n    let winningRows = [];\n    if (winningRow) {\n      winningRows =\n        winningRow.filter(winningCell => winningCell === square).length > 0\n          ? 'win'\n          : '';\n    }\n    return winningRows;\n  };\n  const checkAvailability = () => {\n    const { versus, playerStarts, xIsNext } = props;\n    if (props.gameEnd) {\n      return false;\n    }\n    if (versus === 'A') {\n      return (playerStarts && xIsNext) || (!playerStarts && !xIsNext);\n    }\n    if (versus === 'P') {\n      return true;\n    }\n    return false;\n  };\n  const { squares } = props;\n  return (\n    <div className=\"board-row\">\n      {squares.map((value, square) => {\n        return (\n          <Square\n            key={square.id}\n            id={square}\n            className={checkWinningCell(square)}\n            available={checkAvailability()}\n            xIsNext={props.xIsNext}\n            value={props.squares[square]}\n            onClick={() => props.playerMove(square)}\n          />\n        );\n      })}\n    </div>\n  );\n};\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}