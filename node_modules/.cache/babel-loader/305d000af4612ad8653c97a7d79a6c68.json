{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios'; // import fetch from 'cross-fetch';\n\nimport userService from '../service/index';\nimport * as ActionsTypes from '../constants/actionsType';\n/*\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = { 'Content-Type': 'application/json' };\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = data => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios\n      .post(`${apiURL}register`, { data }, { headers })\n      .then(response => {\n        dispatch(register_Success(response.data));\n        localStorage.setItem('u_code', JSON.stringify(response.data));\n        localStorage.setItem('is_done', true);\n      })\n      .then(response => {\n        return response.json();\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\n/*\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          res = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (res) {\n          dispatch(getUser(response));\n        } else {\n          dispatch(loginFailed(response.message));\n        }\n      });\n  };\n};\n*/\n\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    // dispatch(register_Pending(name, email, password));\n    userService.register(name, email, password).then(() => {\n      dispatch(register_Success());\n    }, error => {\n      dispatch(register_Error(error.toString()));\n    });\n  };\n};\nexport default registerAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["axios","userService","ActionsTypes","register_Success","name","email","password","type","AUTH_REGISTER_SUCCESS","register_Pending","AUTH_REGISTER_PENDING","register_Error","error","AUTH_REGISTER_ERROR","registerAsync","dispatch","register","then","toString"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,MAA4B;AACnDC,EAAAA,IAAI,EAAEL,YAAY,CAACM,qBADgC;AAEnDJ,EAAAA,IAFmD;AAGnDC,EAAAA,KAHmD;AAInDC,EAAAA;AAJmD,CAA5B,CAAzB;;AAOA,MAAMG,gBAAgB,GAAG,CAACL,IAAD,EAAOC,KAAP,EAAcC,QAAd,MAA4B;AACnDC,EAAAA,IAAI,EAAEL,YAAY,CAACQ,qBADgC;AAEnDN,EAAAA,IAFmD;AAGnDC,EAAAA,KAHmD;AAInDC,EAAAA;AAJmD,CAA5B,CAAzB;;AAOA,MAAMK,cAAc,GAAGC,KAAK,KAAK;AAC/BL,EAAAA,IAAI,EAAEL,YAAY,CAACW,mBADY;AAE/BD,EAAAA;AAF+B,CAAL,CAA5B;;AAKA,OAAO,MAAME,aAAa,GAAG,CAACV,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AACtD,SAAOS,QAAQ,IAAI;AACjB;AAEAd,IAAAA,WAAW,CAACe,QAAZ,CAAqBZ,IAArB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CW,IAA5C,CACE,MAAM;AACJF,MAAAA,QAAQ,CAACZ,gBAAgB,EAAjB,CAAR;AACD,KAHH,EAIES,KAAK,IAAI;AACPG,MAAAA,QAAQ,CAACJ,cAAc,CAACC,KAAK,CAACM,QAAN,EAAD,CAAf,CAAR;AACD,KANH;AAQD,GAXD;AAYD,CAbM;AAeP,eAAeJ,aAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\n// import fetch from 'cross-fetch';\n\nimport userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\n\n/*\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = { 'Content-Type': 'application/json' };\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = data => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios\n      .post(`${apiURL}register`, { data }, { headers })\n      .then(response => {\n        dispatch(register_Success(response.data));\n        localStorage.setItem('u_code', JSON.stringify(response.data));\n        localStorage.setItem('is_done', true);\n      })\n      .then(response => {\n        return response.json();\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n/*\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          res = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (res) {\n          dispatch(getUser(response));\n        } else {\n          dispatch(loginFailed(response.message));\n        }\n      });\n  };\n};\n*/\n\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    // dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n\nexport default registerAsync;\n"]},"metadata":{},"sourceType":"module"}