{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/components/Setting.js\";\n\n/* eslint-disable no-restricted-globals */\n\n/* eslint-disable consistent-return */\nimport React from 'react'; // Reusable Setting component that renders a Settings option based on a set of props.\n// Types of Settings: 'selection', 'boolean' and 'counter'. default type='selection'.\n\n/* When type is 'selection' props.options must be provided as an object { key : 'optionName' }\n       key is the value that be passed to setValue() and 'optionName' is the Name that we present to the user.\n       Example: options={{ easy : 'Easy', novice : 'Novice', expert : 'Expert'}} */\n\n/* When type is 'boolean' simply provide an array of 2 options to props.options\n       the first element will be treated as true and the second as false.\n       Example: options={['X - Play 1st', 'O - Play 2nd']} */\n// props.param = an optional additional parameter to pass to setValue(option, param);\n// if props.condition is passed, the component will be shown only when its true (configure '.hidden' & '.shown' in css).\n// props.boundaries = an optional prop that sets limitation of 'counter' settings. default boundaries = [0, 10].\n\nconst Setting = props => {\n  const name = props.name,\n        initialValue = props.initialValue,\n        setValue = props.setValue,\n        boundaries = props.boundaries,\n        param = props.param,\n        condition = props.condition,\n        type = props.type;\n  const hasCondition = condition === undefined ? true : condition;\n  const hasType = type === undefined ? 'selection' : type;\n\n  if (hasType === 'selection') {\n    const options = Object.keys(props.options).map(key => {\n      let option = key;\n\n      if (!isNaN(key)) {\n        option = Number(key);\n      }\n\n      return React.createElement(\"button\", {\n        type: \"button\",\n        key: option,\n        onClick: () => setValue(option, param),\n        className: initialValue === option ? 'selected' : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, props.options[option]);\n    });\n    return React.createElement(\"tr\", {\n      className: hasCondition ? 'shown' : 'hidden',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, name, \":\"), React.createElement(\"td\", {\n      className: \"setting_value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, options, React.createElement(\"hr\", {\n      className: \"hr_settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })));\n  }\n\n  if (hasType === 'boolean') {\n    return React.createElement(\"tr\", {\n      className: hasCondition ? 'shown' : 'hidden',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, name, \":\"), React.createElement(\"td\", {\n      className: \"setting_value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => setValue(true),\n      className: initialValue ? 'selected' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.props.options[0]), ' ', \"/\", React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => setValue(false),\n      className: initialValue ? '' : 'selected',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.props.options[1]), React.createElement(\"hr\", {\n      className: \"hr_settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n  if (hasType === 'counter') {\n    const hasBoundaries = boundaries === undefined ? [0, 10] : boundaries;\n    return React.createElement(\"tr\", {\n      className: hasCondition ? 'shown' : 'hidden',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, name, \":\"), React.createElement(\"td\", {\n      className: \"setting_value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => setValue(initialValue - 1),\n      className: initialValue <= hasBoundaries[0] ? 'set_pace hidden' : 'set_pace',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"-\"), initialValue, \" sec\", React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => setValue(initialValue + 1),\n      className: initialValue >= hasBoundaries[1] ? 'set_pace hidden' : 'set_pace',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"+\"), React.createElement(\"hr\", {\n      className: \"hr_settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })));\n  }\n};\n\nexport default Setting;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/components/Setting.js"],"names":["React","Setting","props","name","initialValue","setValue","boundaries","param","condition","type","hasCondition","undefined","hasType","options","Object","keys","map","key","option","isNaN","Number","hasBoundaries"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-globals */\n/* eslint-disable consistent-return */\nimport React from 'react';\n\n// Reusable Setting component that renders a Settings option based on a set of props.\n\n// Types of Settings: 'selection', 'boolean' and 'counter'. default type='selection'.\n\n/* When type is 'selection' props.options must be provided as an object { key : 'optionName' }\n       key is the value that be passed to setValue() and 'optionName' is the Name that we present to the user.\n       Example: options={{ easy : 'Easy', novice : 'Novice', expert : 'Expert'}} */\n\n/* When type is 'boolean' simply provide an array of 2 options to props.options\n       the first element will be treated as true and the second as false.\n       Example: options={['X - Play 1st', 'O - Play 2nd']} */\n\n// props.param = an optional additional parameter to pass to setValue(option, param);\n// if props.condition is passed, the component will be shown only when its true (configure '.hidden' & '.shown' in css).\n// props.boundaries = an optional prop that sets limitation of 'counter' settings. default boundaries = [0, 10].\n\nconst Setting = props => {\n  const {\n    name,\n    initialValue,\n    setValue,\n    boundaries,\n    param,\n    condition,\n    type\n  } = props;\n  const hasCondition = condition === undefined ? true : condition;\n  const hasType = type === undefined ? 'selection' : type;\n\n  if (hasType === 'selection') {\n    const options = Object.keys(props.options).map(key => {\n      let option = key;\n      if (!isNaN(key)) {\n        option = Number(key);\n      }\n      return (\n        <button\n          type=\"button\"\n          key={option}\n          onClick={() => setValue(option, param)}\n          className={initialValue === option ? 'selected' : ''}\n        >\n          {props.options[option]}\n        </button>\n      );\n    });\n    return (\n      <tr className={hasCondition ? 'shown' : 'hidden'}>\n        <td>{name}:</td>\n        <td className=\"setting_value\">\n          {options}\n          <hr className=\"hr_settings\" />\n        </td>\n      </tr>\n    );\n  }\n\n  if (hasType === 'boolean') {\n    return (\n      <tr className={hasCondition ? 'shown' : 'hidden'}>\n        <td>{name}:</td>\n        <td className=\"setting_value\">\n          <button\n            onClick={() => setValue(true)}\n            className={initialValue ? 'selected' : ''}\n          >\n            {this.props.options[0]}\n          </button>{' '}\n          /\n          <button\n            type=\"button\"\n            onClick={() => setValue(false)}\n            className={initialValue ? '' : 'selected'}\n          >\n            {this.props.options[1]}\n          </button>\n          <hr className=\"hr_settings\" />\n        </td>\n      </tr>\n    );\n  }\n\n  if (hasType === 'counter') {\n    const hasBoundaries = boundaries === undefined ? [0, 10] : boundaries;\n    return (\n      <tr className={hasCondition ? 'shown' : 'hidden'}>\n        <td>{name}:</td>\n        <td className=\"setting_value\">\n          <button\n            type=\"button\"\n            onClick={() => setValue(initialValue - 1)}\n            className={\n              initialValue <= hasBoundaries[0] ? 'set_pace hidden' : 'set_pace'\n            }\n          >\n            -\n          </button>\n          {initialValue} sec\n          <button\n            type=\"button\"\n            onClick={() => setValue(initialValue + 1)}\n            className={\n              initialValue >= hasBoundaries[1] ? 'set_pace hidden' : 'set_pace'\n            }\n          >\n            +\n          </button>\n          <hr className=\"hr_settings\" />\n        </td>\n      </tr>\n    );\n  }\n};\n\nexport default Setting;\n"]},"metadata":{},"sourceType":"module"}