{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios'; // import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = {\n  'Content-Type': 'application/json'\n};\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios.post(\"\".concat(apiURL, \"register\"), {\n      name,\n      email,\n      password\n    }, {\n      headers\n    }).then(response => {\n      localStorage.setItem('u_code', encodeURIComponent(JSON.stringify(response.data)));\n      localStorage.setItem('is_done', true);\n      dispatch(register_Success(response.data));\n    }).catch(error => {\n      dispatch(register_Error(error));\n    });\n  };\n};\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\nexport default registerAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["axios","ActionsTypes","apiURL","headers","register_Success","type","AUTH_REGISTER_SUCCESS","register_Pending","AUTH_REGISTER_PENDING","register_Error","error","AUTH_REGISTER_ERROR","registerAsync","name","email","password","dispatch","post","then","response","localStorage","setItem","encodeURIComponent","JSON","stringify","data","catch"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA,MAAMC,MAAM,GAAG,8BAAf;AACA,MAAMC,OAAO,GAAG;AAAE,kBAAgB;AAAlB,CAAhB;;AAEA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BC,EAAAA,IAAI,EAAEJ,YAAY,CAACK;AADW,CAAP,CAAzB;;AAIA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BF,EAAAA,IAAI,EAAEJ,YAAY,CAACO;AADW,CAAP,CAAzB;;AAIA,MAAMC,cAAc,GAAGC,KAAK,KAAK;AAC/BL,EAAAA,IAAI,EAAEJ,YAAY,CAACU,mBADY;AAE/BD,EAAAA;AAF+B,CAAL,CAA5B;;AAKA,OAAO,MAAME,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AACtD,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACT,gBAAgB,EAAjB,CAAR;AACAP,IAAAA,KAAK,CACFiB,IADH,WACWf,MADX,eAC6B;AAAEW,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAD7B,EACwD;AAAEZ,MAAAA;AAAF,KADxD,EAEGe,IAFH,CAEQC,QAAQ,IAAI;AAChBC,MAAAA,YAAY,CAACC,OAAb,CACE,QADF,EAEEC,kBAAkB,CAACC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACM,IAAxB,CAAD,CAFpB;AAIAL,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,IAAhC;AACAL,MAAAA,QAAQ,CAACZ,gBAAgB,CAACe,QAAQ,CAACM,IAAV,CAAjB,CAAR;AACD,KATH,EAUGC,KAVH,CAUShB,KAAK,IAAI;AACdM,MAAAA,QAAQ,CAACP,cAAc,CAACC,KAAD,CAAf,CAAR;AACD,KAZH;AAaD,GAfD;AAgBD,CAjBM;AAmBP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,eAAeE,aAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\n// import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\n\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = { 'Content-Type': 'application/json' };\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios\n      .post(`${apiURL}register`, { name, email, password }, { headers })\n      .then(response => {\n        localStorage.setItem(\n          'u_code',\n          encodeURIComponent(JSON.stringify(response.data))\n        );\n        localStorage.setItem('is_done', true);\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\nexport default registerAsync;\n"]},"metadata":{},"sourceType":"module"}