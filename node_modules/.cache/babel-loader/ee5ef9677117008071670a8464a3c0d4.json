{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios';\nimport * as ActionsTypes from '../constants/actionsType';\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n});\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nexport const registerAsync = (name, email, password) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(name, email, password)\n  };\n  return fetch(\"\".concat(config.apiUrl, \"/users/register\"), requestOptions).then(handleResponse);\n};\nexport default registerAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["axios","ActionsTypes","registerAsync","name","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","config","apiUrl","then","handleResponse"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AACtD,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,EAAqBC,KAArB,EAA4BC,QAA5B;AAHe,GAAvB;AAKA,SAAOO,KAAK,WAAIC,MAAM,CAACC,MAAX,sBAAoCR,cAApC,CAAL,CAAyDS,IAAzD,CACLC,cADK,CAAP;AAGD,CATM;AAWP,eAAed,aAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\nimport * as ActionsTypes from '../constants/actionsType';\n\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n});\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nexport const registerAsync = (name, email, password) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(name, email, password)\n  };\n  return fetch(`${config.apiUrl}/users/register`, requestOptions).then(\n    handleResponse\n  );\n};\n\nexport default registerAsync;\n"]},"metadata":{},"sourceType":"module"}