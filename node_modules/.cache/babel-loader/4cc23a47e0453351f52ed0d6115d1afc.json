{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios'; // import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nvar data = {\n  name: this.state.name,\n  user_email: this.state.email,\n  mobile_number: this.state.mobile,\n  password: this.state.password\n};\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client.post('/register', {\n      name,\n      email,\n      password\n    }).then(response => {\n      dispatch(register_Success(response.data));\n    }).catch(error => {\n      dispatch(register_Error(error));\n    });\n  };\n};\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\nexport default registerAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["axios","ActionsTypes","apiURL","client","create","baseURL","headers","data","name","state","user_email","email","mobile_number","mobile","password","register_Success","type","AUTH_REGISTER_SUCCESS","register_Pending","AUTH_REGISTER_PENDING","register_Error","error","AUTH_REGISTER_ERROR","registerAsync","dispatch","post","then","response","catch"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA,MAAMC,MAAM,GAAG,6BAAf;AACA,MAAMC,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAEH,MADiB;AAE1BI,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFiB,CAAb,CAAf;AAOA,IAAIC,IAAI,GAAG;AACTC,EAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IADR;AAGTE,EAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWE,KAHd;AAKTC,EAAAA,aAAa,EAAE,KAAKH,KAAL,CAAWI,MALjB;AAOTC,EAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK;AAPZ,CAAX;;AAUA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BC,EAAAA,IAAI,EAAEf,YAAY,CAACgB;AADW,CAAP,CAAzB;;AAIA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BF,EAAAA,IAAI,EAAEf,YAAY,CAACkB;AADW,CAAP,CAAzB;;AAIA,MAAMC,cAAc,GAAGC,KAAK,KAAK;AAC/BL,EAAAA,IAAI,EAAEf,YAAY,CAACqB,mBADY;AAE/BD,EAAAA;AAF+B,CAAL,CAA5B;;AAKA,OAAO,MAAME,aAAa,GAAG,CAACf,IAAD,EAAOG,KAAP,EAAcG,QAAd,KAA2B;AACtD,SAAOU,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACAf,IAAAA,MAAM,CACHsB,IADH,CACQ,WADR,EACqB;AAAEjB,MAAAA,IAAF;AAAQG,MAAAA,KAAR;AAAeG,MAAAA;AAAf,KADrB,EAEGY,IAFH,CAEQC,QAAQ,IAAI;AAChBH,MAAAA,QAAQ,CAACT,gBAAgB,CAACY,QAAQ,CAACpB,IAAV,CAAjB,CAAR;AACD,KAJH,EAKGqB,KALH,CAKSP,KAAK,IAAI;AACdG,MAAAA,QAAQ,CAACJ,cAAc,CAACC,KAAD,CAAf,CAAR;AACD,KAPH;AAQD,GAVD;AAWD,CAZM;AAcP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,eAAeE,aAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\n// import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\n\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nvar data = {\n  name: this.state.name,\n\n  user_email: this.state.email,\n\n  mobile_number: this.state.mobile,\n\n  password: this.state.password\n};\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\nexport default registerAsync;\n"]},"metadata":{},"sourceType":"module"}