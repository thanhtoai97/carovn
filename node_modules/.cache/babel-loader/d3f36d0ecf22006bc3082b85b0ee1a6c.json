{"ast":null,"code":"var _jsxFileName = \"/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\n\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      const form = this.props.form;\n      e.preventDefault();\n      form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const confirmDirty = this.state.confirmDirty;\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const confirmDirty = this.state.confirmDirty;\n      const form = this.props.form;\n\n      if (value && confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.state = {\n      confirmDirty: false\n    };\n  }\n\n  render() {\n    const form = this.props.form;\n    const getFieldDecorator = form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"boo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Button, {\n      loading: registering,\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  loggedInUser: state.authReducerRegister.loggedInUser\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) => dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(mapStateToProps, matchDispatchToProps)(form);","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/containers/RegisterPage/Register.js"],"names":["React","connect","Form","Input","Checkbox","Button","registerAsync","RegistrationForm","Component","constructor","props","handleSubmit","e","form","preventDefault","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","confirmDirty","state","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","rules","type","message","required","validator","valuePropName","registering","create","mapStateToProps","loggedInUser","authReducerRegister","matchDispatchToProps","dispatch","name","email","password"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Checkbox, Button } from 'antd';\nimport { registerAsync } from '../../modules/Register/actions/index';\n\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmDirty: false\n    };\n  }\n\n  handleSubmit = e => {\n    const { form } = this.props;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { confirmDirty } = this.state;\n    const { value } = e.target;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { confirmDirty } = this.state;\n    const { form } = this.props;\n    if (value && confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  render() {\n    const { form } = this.props;\n    const { getFieldDecorator } = form;\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator('email', {\n            rules: [\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!'\n              },\n              {\n                required: true,\n                message: 'Please input your E-mail!'\n              }\n            ]\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!'\n              },\n              {\n                validator: this.validateToNextPassword\n              }\n            ]\n          })(<Input.Password />)}\n        </Form.Item>\n        <Form.Item label=\"Confirm Password\" hasFeedback>\n          {getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!'\n              },\n              {\n                validator: this.compareToFirstPassword\n              }\n            ]\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked'\n          })(\n            <Checkbox>\n              I have read the <a href=\"boo\">agreement</a>\n            </Checkbox>\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button loading={registering} type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst form = Form.create()(RegistrationForm);\n\nconst mapStateToProps = state => ({\n  loggedInUser: state.authReducerRegister.loggedInUser\n});\n\nconst matchDispatchToProps = dispatch => ({\n  registerAsync: (name, email, password) =>\n    dispatch(registerAsync(name, email, password))\n});\n\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(form);\n"]},"metadata":{},"sourceType":"module"}