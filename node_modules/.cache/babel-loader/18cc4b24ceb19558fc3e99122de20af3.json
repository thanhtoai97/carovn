{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios';\nimport fetch from 'cross-fetch'; // import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = {\n  'Content-Type': 'application/json'\n};\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = data => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios.post(\"\".concat(apiURL, \"register\"), {\n      data\n    }, {\n      headers\n    }).then(response => {\n      dispatch(register_Success(response.data));\n      localStorage.setItem('u_code', JSON.stringify(response.data));\n      localStorage.setItem('is_done', true);\n    }).then(response => {\n      return response.json();\n    }).catch(error => {\n      dispatch(register_Error(error));\n    });\n  };\n  /*\n  fetch('http://localhost:5000/users/register', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n       body: JSON.stringify({\n        email,\n        name,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          check = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (!check) {\n          this.setState({\n            kindAlert: 'failed',\n            message: response.message\n          });\n        } else {\n          this.setState({\n            kindAlert: 'success'\n          });\n        }\n      });\n  };\n  */\n};\n/*\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          res = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (res) {\n          dispatch(getUser(response));\n        } else {\n          dispatch(loginFailed(response.message));\n        }\n      });\n  };\n};\n*/\n\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\nexport default registerAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["axios","fetch","ActionsTypes","apiURL","headers","register_Success","type","AUTH_REGISTER_SUCCESS","register_Pending","AUTH_REGISTER_PENDING","register_Error","error","AUTH_REGISTER_ERROR","registerAsync","data","dispatch","post","then","response","localStorage","setItem","JSON","stringify","json","catch"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AAEA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA,MAAMC,MAAM,GAAG,8BAAf;AACA,MAAMC,OAAO,GAAG;AAAE,kBAAgB;AAAlB,CAAhB;;AAEA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BC,EAAAA,IAAI,EAAEJ,YAAY,CAACK;AADW,CAAP,CAAzB;;AAIA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BF,EAAAA,IAAI,EAAEJ,YAAY,CAACO;AADW,CAAP,CAAzB;;AAIA,MAAMC,cAAc,GAAGC,KAAK,KAAK;AAC/BL,EAAAA,IAAI,EAAEJ,YAAY,CAACU,mBADY;AAE/BD,EAAAA;AAF+B,CAAL,CAA5B;;AAKA,OAAO,MAAME,aAAa,GAAGC,IAAI,IAAI;AACnC,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACAR,IAAAA,KAAK,CACFgB,IADH,WACWb,MADX,eAC6B;AAAEW,MAAAA;AAAF,KAD7B,EACuC;AAAEV,MAAAA;AAAF,KADvC,EAEGa,IAFH,CAEQC,QAAQ,IAAI;AAChBH,MAAAA,QAAQ,CAACV,gBAAgB,CAACa,QAAQ,CAACJ,IAAV,CAAjB,CAAR;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACJ,IAAxB,CAA/B;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,IAAhC;AACD,KANH,EAOGH,IAPH,CAOQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACK,IAAT,EAAP;AACD,KATH,EAUGC,KAVH,CAUSb,KAAK,IAAI;AACdI,MAAAA,QAAQ,CAACL,cAAc,CAACC,KAAD,CAAf,CAAR;AACD,KAZH;AAaD,GAfD;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCD,CApDM;AAqDP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,eAAeE,aAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\nimport fetch from 'cross-fetch';\n\n// import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\n\nconst apiURL = 'http://localhost:3002/users/';\nconst headers = { 'Content-Type': 'application/json' };\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = data => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios\n      .post(`${apiURL}register`, { data }, { headers })\n      .then(response => {\n        dispatch(register_Success(response.data));\n        localStorage.setItem('u_code', JSON.stringify(response.data));\n        localStorage.setItem('is_done', true);\n      })\n      .then(response => {\n        return response.json();\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n\n  /*\n fetch('http://localhost:5000/users/register', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        name,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          check = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (!check) {\n          this.setState({\n            kindAlert: 'failed',\n            message: response.message\n          });\n        } else {\n          this.setState({\n            kindAlert: 'success'\n          });\n        }\n      });\n  };\n  */\n};\n/*\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          res = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (res) {\n          dispatch(getUser(response));\n        } else {\n          dispatch(loginFailed(response.message));\n        }\n      });\n  };\n};\n*/\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\nexport default registerAsync;\n"]},"metadata":{},"sourceType":"module"}