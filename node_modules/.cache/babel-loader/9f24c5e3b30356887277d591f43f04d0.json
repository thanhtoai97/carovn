{"ast":null,"code":"import _defineProperty from \"/Users/lttttoai/Documents/GitHub/carovn/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-unreachable */\nconst initialState = {\n  versus: 'A',\n  difficulty: 'expert',\n  playerStarts: true,\n  mode: 'normal',\n  pace: null\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_MODE':\n      return _objectSpread({}, state, {\n        mode: action.mode,\n        pace: action.initialPace\n      });\n      break;\n\n    case 'SET_PACE':\n      return _objectSpread({}, state, {\n        pace: action.pace\n      });\n      break;\n\n    case 'SET_VS':\n      return _objectSpread({}, state, {\n        versus: action.vs\n      });\n      break;\n\n    case 'SET_DIFFICULTY':\n      return _objectSpread({}, state, {\n        difficulty: action.diff\n      });\n      break;\n\n    case 'SET_STARTER':\n      return _objectSpread({}, state, {\n        playerStarts: action.starter\n      });\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/reducers/settingReducer.js"],"names":["initialState","versus","difficulty","playerStarts","mode","pace","gameReducer","state","action","type","initialPace","vs","diff","starter"],"mappings":";;;;;;AAAA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,GADW;AAEnBC,EAAAA,UAAU,EAAE,QAFO;AAGnBC,EAAAA,YAAY,EAAE,IAHK;AAInBC,EAAAA,IAAI,EAAE,QAJa;AAKnBC,EAAAA,IAAI,EAAE;AALa,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,+BAAYF,KAAZ;AAAmBH,QAAAA,IAAI,EAAEI,MAAM,CAACJ,IAAhC;AAAsCC,QAAAA,IAAI,EAAEG,MAAM,CAACE;AAAnD;AACA;;AACF,SAAK,UAAL;AACE,+BAAYH,KAAZ;AAAmBF,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAAhC;AACA;;AACF,SAAK,QAAL;AACE,+BAAYE,KAAZ;AAAmBN,QAAAA,MAAM,EAAEO,MAAM,CAACG;AAAlC;AACA;;AACF,SAAK,gBAAL;AACE,+BAAYJ,KAAZ;AAAmBL,QAAAA,UAAU,EAAEM,MAAM,CAACI;AAAtC;AACA;;AACF,SAAK,aAAL;AACE,+BAAYL,KAAZ;AAAmBJ,QAAAA,YAAY,EAAEK,MAAM,CAACK;AAAxC;AACA;;AACF;AACE,aAAON,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,eAAeD,WAAf","sourcesContent":["/* eslint-disable no-unreachable */\nconst initialState = {\n  versus: 'A',\n  difficulty: 'expert',\n  playerStarts: true,\n  mode: 'normal',\n  pace: null\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_MODE':\n      return { ...state, mode: action.mode, pace: action.initialPace };\n      break;\n    case 'SET_PACE':\n      return { ...state, pace: action.pace };\n      break;\n    case 'SET_VS':\n      return { ...state, versus: action.vs };\n      break;\n    case 'SET_DIFFICULTY':\n      return { ...state, difficulty: action.diff };\n      break;\n    case 'SET_STARTER':\n      return { ...state, playerStarts: action.starter };\n      break;\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;\n"]},"metadata":{},"sourceType":"module"}