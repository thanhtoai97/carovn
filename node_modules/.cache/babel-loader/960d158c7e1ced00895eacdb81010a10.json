{"ast":null,"code":"/* eslint-disable camelcase */\nimport { userService } from '../service/index'; // import axios from 'axios';\n// import * as ActionsTypes from '../constants/actionsType';\n\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n});\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(user).then(user => {\n      dispatch(success());\n      history.push('/login');\n      dispatch(alertActions.success('Registration successful'));\n    }, error => {\n      dispatch(failure(error.toString()));\n      dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["userService","register","user","dispatch","request","then","success","history","push","alertActions","error","failure","toString","type","userConstants","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACC,OAAO,CAACF,IAAD,CAAR,CAAR;AAEAF,IAAAA,WAAW,CAACC,QAAZ,CAAqBC,IAArB,EAA2BG,IAA3B,CACEH,IAAI,IAAI;AACNC,MAAAA,QAAQ,CAACG,OAAO,EAAR,CAAR;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,QAAb;AACAL,MAAAA,QAAQ,CAACM,YAAY,CAACH,OAAb,CAAqB,yBAArB,CAAD,CAAR;AACD,KALH,EAMEI,KAAK,IAAI;AACPP,MAAAA,QAAQ,CAACQ,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR;AACAT,MAAAA,QAAQ,CAACM,YAAY,CAACC,KAAb,CAAmBA,KAAK,CAACE,QAAN,EAAnB,CAAD,CAAR;AACD,KATH;AAWD,GAdD;;AAgBA,WAASR,OAAT,CAAiBF,IAAjB,EAAuB;AACrB,WAAO;AAAEW,MAAAA,IAAI,EAAEC,aAAa,CAACC,gBAAtB;AAAwCb,MAAAA;AAAxC,KAAP;AACD;;AACD,WAASI,OAAT,CAAiBJ,IAAjB,EAAuB;AACrB,WAAO;AAAEW,MAAAA,IAAI,EAAEC,aAAa,CAACE,gBAAtB;AAAwCd,MAAAA;AAAxC,KAAP;AACD;;AACD,WAASS,OAAT,CAAiBD,KAAjB,EAAwB;AACtB,WAAO;AAAEG,MAAAA,IAAI,EAAEC,aAAa,CAACG,gBAAtB;AAAwCP,MAAAA;AAAxC,KAAP;AACD;AACF","sourcesContent":["/* eslint-disable camelcase */\nimport { userService } from '../service/index';\n\n// import axios from 'axios';\n// import * as ActionsTypes from '../constants/actionsType';\n\n/*\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n});\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    client\n      .post('/register', { name, email, password })\n      .then(response => {\n        dispatch(register_Success(response.data));\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n*/\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n\n    userService.register(user).then(\n      user => {\n        dispatch(success());\n        history.push('/login');\n        dispatch(alertActions.success('Registration successful'));\n      },\n      error => {\n        dispatch(failure(error.toString()));\n        dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.REGISTER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.REGISTER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.REGISTER_FAILURE, error };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}