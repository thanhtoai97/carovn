{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios'; // import fetch from 'cross-fetch';\n// import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\nconst apiURL = 'http://localhost:5000/users/';\nconst headers = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n};\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios.post(\"\".concat(apiURL, \"register\"), {\n      name,\n      email,\n      password\n    }, {\n      headers\n    }).then(response => {\n      dispatch(register_Success(response.data));\n      localStorage.setItem('u_code', JSON.stringify(response.message));\n      localStorage.setItem('is_done', true);\n      window.location.href = '/#login';\n    }).catch(error => {\n      dispatch(register_Error(error));\n    });\n  };\n};\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n*/\n\n/*\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\n/*\nexport const registerAsync = (name, email, password) => {\n  let check = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/register', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          check = false;\n        }\n        dispatch.register_Success(name, email, password);\n        return response.json();\n      })\n      .then(response => {\n        if (!check) {\n          dispatch.register_Error(response);\n        } else {\n          this.setState({\n            kindAlert: 'success'\n          });\n        }\n      });\n  };\n};\n*/\n\nexport default registerAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Register/actions/index.js"],"names":["axios","ActionsTypes","apiURL","headers","Accept","register_Success","type","AUTH_REGISTER_SUCCESS","register_Pending","AUTH_REGISTER_PENDING","register_Error","error","AUTH_REGISTER_ERROR","registerAsync","name","email","password","dispatch","post","then","response","data","localStorage","setItem","JSON","stringify","message","window","location","href","catch"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AAEA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA,MAAMC,MAAM,GAAG,8BAAf;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,kBADM;AAEd,kBAAgB;AAFF,CAAhB;;AAKA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BC,EAAAA,IAAI,EAAEL,YAAY,CAACM;AADW,CAAP,CAAzB;;AAIA,MAAMC,gBAAgB,GAAG,OAAO;AAC9BF,EAAAA,IAAI,EAAEL,YAAY,CAACQ;AADW,CAAP,CAAzB;;AAIA,MAAMC,cAAc,GAAGC,KAAK,KAAK;AAC/BL,EAAAA,IAAI,EAAEL,YAAY,CAACW,mBADY;AAE/BD,EAAAA;AAF+B,CAAL,CAA5B;;AAKA,OAAO,MAAME,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AACtD,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACT,gBAAgB,EAAjB,CAAR;AACAR,IAAAA,KAAK,CACFkB,IADH,WACWhB,MADX,eAC6B;AAAEY,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAD7B,EACwD;AAAEb,MAAAA;AAAF,KADxD,EAEGgB,IAFH,CAEQC,QAAQ,IAAI;AAChBH,MAAAA,QAAQ,CAACZ,gBAAgB,CAACe,QAAQ,CAACC,IAAV,CAAjB,CAAR;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeL,QAAQ,CAACM,OAAxB,CAA/B;AACAJ,MAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,IAAhC;AACAI,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACD,KAPH,EAQGC,KARH,CAQSnB,KAAK,IAAI;AACdM,MAAAA,QAAQ,CAACP,cAAc,CAACC,KAAD,CAAf,CAAR;AACD,KAVH;AAWD,GAbD;AAcD,CAfM;AAiBP;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,eAAeE,aAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\n// import fetch from 'cross-fetch';\n\n// import userService from '../service/index';\n\nimport * as ActionsTypes from '../constants/actionsType';\n\nconst apiURL = 'http://localhost:5000/users/';\nconst headers = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n};\n\nconst register_Success = () => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS\n});\n\nconst register_Pending = () => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending());\n    axios\n      .post(`${apiURL}register`, { name, email, password }, { headers })\n      .then(response => {\n        dispatch(register_Success(response.data));\n        localStorage.setItem('u_code', JSON.stringify(response.message));\n        localStorage.setItem('is_done', true);\n        window.location.href = '/#login';\n      })\n      .catch(error => {\n        dispatch(register_Error(error));\n      });\n  };\n};\n\n/*\nconst register_Success = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_SUCCESS,\n  name,\n  email,\n  password\n});\n\nconst register_Pending = (name, email, password) => ({\n  type: ActionsTypes.AUTH_REGISTER_PENDING,\n  name,\n  email,\n  password\n});\n\nconst register_Error = error => ({\n  type: ActionsTypes.AUTH_REGISTER_ERROR,\n  error\n});\n*/\n/*\nexport const registerAsync = (name, email, password) => {\n  return dispatch => {\n    dispatch(register_Pending(name, email, password));\n\n    userService.register(name, email, password).then(\n      () => {\n        dispatch(register_Success());\n      },\n      error => {\n        dispatch(register_Error(error.toString()));\n      }\n    );\n  };\n};\n*/\n\n/*\nexport const registerAsync = (name, email, password) => {\n  let check = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/register', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          check = false;\n        }\n        dispatch.register_Success(name, email, password);\n        return response.json();\n      })\n      .then(response => {\n        if (!check) {\n          dispatch.register_Error(response);\n        } else {\n          this.setState({\n            kindAlert: 'success'\n          });\n        }\n      });\n  };\n};\n*/\nexport default registerAsync;\n"]},"metadata":{},"sourceType":"module"}