{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios';\nimport fetch from 'cross-fetch';\nimport * as ActionsTypes from '../constants/actionsType';\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst login_Success = user => ({\n  type: ActionsTypes.AUTH_LOGIN_SUCCESS,\n  user\n});\n\nconst login_Pending = () => ({\n  type: ActionsTypes.AUTH_LOGIN_PENDING\n});\n\nconst login_Error = error => ({\n  type: ActionsTypes.AUTH_LOGIN_ERROR,\n  error\n});\n/*\nexport const loginAsync = (email, password) => {\n  return dispatch => {\n    dispatch(login_Pending());\n    client\n      .post('/login', { email, password })\n      .then(response => {\n        dispatch(login_Success(response));\n        localStorage.setItem('loggedInUser', JSON.stringify(email, password));\n        window.location.href = '/';\n      })\n      .catch(error => {\n        dispatch(login_Error(error));\n        window.location.href = '/#login';\n      });\n  };\n};\n*/\n\n\nexport const loginAsync = (email, password) => {\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(response => {\n      if (response.status !== 200) {\n        return false;\n      }\n\n      dispatch(login_Success(response));\n      window.location.href = '/';\n      return response.json();\n    }).then(response => {\n      dispatch(login_Error(response.message));\n      window.location.href = '/#login';\n    });\n  };\n};\nexport default loginAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Login/actions/index.js"],"names":["axios","fetch","ActionsTypes","apiURL","client","create","baseURL","headers","login_Success","user","type","AUTH_LOGIN_SUCCESS","login_Pending","AUTH_LOGIN_PENDING","login_Error","error","AUTH_LOGIN_ERROR","loginAsync","email","password","dispatch","method","Accept","body","JSON","stringify","then","response","status","window","location","href","json","message"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA,MAAMC,MAAM,GAAG,6BAAf;AACA,MAAMC,MAAM,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAEH,MADiB;AAE1BI,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFiB,CAAb,CAAf;;AAOA,MAAMC,aAAa,GAAGC,IAAI,KAAK;AAC7BC,EAAAA,IAAI,EAAER,YAAY,CAACS,kBADU;AAE7BF,EAAAA;AAF6B,CAAL,CAA1B;;AAKA,MAAMG,aAAa,GAAG,OAAO;AAC3BF,EAAAA,IAAI,EAAER,YAAY,CAACW;AADQ,CAAP,CAAtB;;AAIA,MAAMC,WAAW,GAAGC,KAAK,KAAK;AAC5BL,EAAAA,IAAI,EAAER,YAAY,CAACc,gBADS;AAE5BD,EAAAA;AAF4B,CAAL,CAAzB;AAKA;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,MAAME,UAAU,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7C,SAAOC,QAAQ,IAAI;AACjBnB,IAAAA,KAAK,CAAC,mCAAD,EAAsC;AACzCoB,MAAAA,MAAM,EAAE,MADiC;AAEzCd,MAAAA,OAAO,EAAE;AACPe,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFgC;AAOzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,QAAAA,KADmB;AAEnBC,QAAAA;AAFmB,OAAf;AAPmC,KAAtC,CAAL,CAYGO,IAZH,CAYQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAO,KAAP;AACD;;AACDR,MAAAA,QAAQ,CAACZ,aAAa,CAACmB,QAAD,CAAd,CAAR;AACAE,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACA,aAAOJ,QAAQ,CAACK,IAAT,EAAP;AACD,KAnBH,EAoBGN,IApBH,CAoBQC,QAAQ,IAAI;AAChBP,MAAAA,QAAQ,CAACN,WAAW,CAACa,QAAQ,CAACM,OAAV,CAAZ,CAAR;AACAJ,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACD,KAvBH;AAwBD,GAzBD;AA0BD,CA3BM;AA6BP,eAAed,UAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\nimport fetch from 'cross-fetch';\nimport * as ActionsTypes from '../constants/actionsType';\n\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst login_Success = user => ({\n  type: ActionsTypes.AUTH_LOGIN_SUCCESS,\n  user\n});\n\nconst login_Pending = () => ({\n  type: ActionsTypes.AUTH_LOGIN_PENDING\n});\n\nconst login_Error = error => ({\n  type: ActionsTypes.AUTH_LOGIN_ERROR,\n  error\n});\n\n/*\nexport const loginAsync = (email, password) => {\n  return dispatch => {\n    dispatch(login_Pending());\n    client\n      .post('/login', { email, password })\n      .then(response => {\n        dispatch(login_Success(response));\n        localStorage.setItem('loggedInUser', JSON.stringify(email, password));\n        window.location.href = '/';\n      })\n      .catch(error => {\n        dispatch(login_Error(error));\n        window.location.href = '/#login';\n      });\n  };\n};\n*/\n\nexport const loginAsync = (email, password) => {\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          return false;\n        }\n        dispatch(login_Success(response));\n        window.location.href = '/';\n        return response.json();\n      })\n      .then(response => {\n        dispatch(login_Error(response.message));\n        window.location.href = '/#login';\n      });\n  };\n};\n\nexport default loginAsync;\n"]},"metadata":{},"sourceType":"module"}