{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useForkRef;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _setRef = _interopRequireDefault(require(\"./setRef\"));\n\nfunction useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return _react.default.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      (0, _setRef.default)(refA, refValue);\n      (0, _setRef.default)(refB, refValue);\n    };\n  }, [refA, refB]);\n}","map":null,"metadata":{},"sourceType":"script"}