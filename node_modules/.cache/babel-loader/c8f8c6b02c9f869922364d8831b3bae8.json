{"ast":null,"code":"/* eslint-disable camelcase */\nimport axios from 'axios';\nimport fetch from 'cross-fetch';\nimport * as ActionsTypes from '../constants/actionsType';\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst login_Success = loggedInUser => ({\n  type: ActionsTypes.AUTH_LOGIN_SUCCESS,\n  loggedInUser\n});\n\nconst login_Pending = () => ({\n  type: ActionsTypes.AUTH_LOGIN_PENDING\n});\n\nconst login_Error = error => ({\n  type: ActionsTypes.AUTH_LOGIN_ERROR,\n  error\n});\n/*\nexport const loginAsync = (email, password) => {\n  return dispatch => {\n    dispatch(login_Pending());\n    client\n      .post('/login', { email, password })\n      .then(response => {\n        dispatch(login_Success(response.data));\n        localStorage.setItem('loggedInUser', JSON.stringify(response.data));\n      })\n      .catch(error => {\n        dispatch(login_Error(error));\n      });\n  };\n};\n*/\n\n\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(response => {\n      if (response.status !== 200) {\n        res = false;\n      }\n\n      return response.json();\n    }).then(response => {\n      if (res) {\n        dispatch(getUser(response));\n      } else {\n        dispatch(loginFailed(response.message));\n      }\n    });\n  };\n};\nexport default loginAsync;","map":{"version":3,"sources":["/Users/lttttoai/Documents/GitHub/carovn/src/modules/Login/actions/index.js"],"names":["axios","fetch","ActionsTypes","apiURL","client","create","baseURL","headers","login_Success","loggedInUser","type","AUTH_LOGIN_SUCCESS","login_Pending","AUTH_LOGIN_PENDING","login_Error","error","AUTH_LOGIN_ERROR","callAPILogin","email","password","res","dispatch","method","Accept","body","JSON","stringify","then","response","status","json","getUser","loginFailed","message","loginAsync"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,KAAKC,YAAZ,MAA8B,0BAA9B;AAEA,MAAMC,MAAM,GAAG,6BAAf;AACA,MAAMC,MAAM,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC1BC,EAAAA,OAAO,EAAEH,MADiB;AAE1BI,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAFiB,CAAb,CAAf;;AAOA,MAAMC,aAAa,GAAGC,YAAY,KAAK;AACrCC,EAAAA,IAAI,EAAER,YAAY,CAACS,kBADkB;AAErCF,EAAAA;AAFqC,CAAL,CAAlC;;AAKA,MAAMG,aAAa,GAAG,OAAO;AAC3BF,EAAAA,IAAI,EAAER,YAAY,CAACW;AADQ,CAAP,CAAtB;;AAIA,MAAMC,WAAW,GAAGC,KAAK,KAAK;AAC5BL,EAAAA,IAAI,EAAER,YAAY,CAACc,gBADS;AAE5BD,EAAAA;AAF4B,CAAL,CAAzB;AAIA;;;;;;;;;;;;;;;;;;AAgBA,OAAO,MAAME,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC/C,MAAIC,GAAG,GAAG,IAAV;AACA,SAAOC,QAAQ,IAAI;AACjBpB,IAAAA,KAAK,CAAC,mCAAD,EAAsC;AACzCqB,MAAAA,MAAM,EAAE,MADiC;AAEzCf,MAAAA,OAAO,EAAE;AACPgB,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFgC;AAOzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBR,QAAAA,KADmB;AAEnBC,QAAAA;AAFmB,OAAf;AAPmC,KAAtC,CAAL,CAYGQ,IAZH,CAYQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BT,QAAAA,GAAG,GAAG,KAAN;AACD;;AACD,aAAOQ,QAAQ,CAACE,IAAT,EAAP;AACD,KAjBH,EAkBGH,IAlBH,CAkBQC,QAAQ,IAAI;AAChB,UAAIR,GAAJ,EAAS;AACPC,QAAAA,QAAQ,CAACU,OAAO,CAACH,QAAD,CAAR,CAAR;AACD,OAFD,MAEO;AACLP,QAAAA,QAAQ,CAACW,WAAW,CAACJ,QAAQ,CAACK,OAAV,CAAZ,CAAR;AACD;AACF,KAxBH;AAyBD,GA1BD;AA2BD,CA7BM;AA8BP,eAAeC,UAAf","sourcesContent":["/* eslint-disable camelcase */\nimport axios from 'axios';\nimport fetch from 'cross-fetch';\nimport * as ActionsTypes from '../constants/actionsType';\n\nconst apiURL = 'http://localhost:3002/users';\nconst client = axios.create({\n  baseURL: apiURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nconst login_Success = loggedInUser => ({\n  type: ActionsTypes.AUTH_LOGIN_SUCCESS,\n  loggedInUser\n});\n\nconst login_Pending = () => ({\n  type: ActionsTypes.AUTH_LOGIN_PENDING\n});\n\nconst login_Error = error => ({\n  type: ActionsTypes.AUTH_LOGIN_ERROR,\n  error\n});\n/*\nexport const loginAsync = (email, password) => {\n  return dispatch => {\n    dispatch(login_Pending());\n    client\n      .post('/login', { email, password })\n      .then(response => {\n        dispatch(login_Success(response.data));\n        localStorage.setItem('loggedInUser', JSON.stringify(response.data));\n      })\n      .catch(error => {\n        dispatch(login_Error(error));\n      });\n  };\n};\n*/\nexport const callAPILogin = (email, password) => {\n  let res = true;\n  return dispatch => {\n    fetch('http://localhost:5000/users/login', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\n        email,\n        password\n      })\n    })\n      .then(response => {\n        if (response.status !== 200) {\n          res = false;\n        }\n        return response.json();\n      })\n      .then(response => {\n        if (res) {\n          dispatch(getUser(response));\n        } else {\n          dispatch(loginFailed(response.message));\n        }\n      });\n  };\n};\nexport default loginAsync;\n"]},"metadata":{},"sourceType":"module"}